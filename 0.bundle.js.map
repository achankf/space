{"version":3,"sources":["webpack:///../myalgo-ts/dist/array/index.js","webpack:///../myalgo-ts/dist/array/minheap.js","webpack:///../myalgo-ts/dist/array/sortedList.js","webpack:///../myalgo-ts/dist/boundary.js","webpack:///../myalgo-ts/dist/comparison/binarySearch.js","webpack:///../myalgo-ts/dist/comparison/cmpList.js","webpack:///../myalgo-ts/dist/comparison/index.js","webpack:///../myalgo-ts/dist/comparison/isSorted.js","webpack:///../myalgo-ts/dist/comparison/merge.js","webpack:///../myalgo-ts/dist/comparison/uniq.js","webpack:///../myalgo-ts/dist/graph/aStar.js","webpack:///../myalgo-ts/dist/graph/breadthFirstTraversal.js","webpack:///../myalgo-ts/dist/graph/depthFirstTraversal.js","webpack:///../myalgo-ts/dist/graph/floydWarshall.js","webpack:///../myalgo-ts/dist/graph/index.js","webpack:///../myalgo-ts/dist/graph/kruskalMST.js","webpack:///../myalgo-ts/dist/graph/stableMarriage.js","webpack:///../myalgo-ts/dist/index.js","webpack:///../myalgo-ts/dist/iter/combine.js","webpack:///../myalgo-ts/dist/iter/genBy.js","webpack:///../myalgo-ts/dist/iter/index.js","webpack:///../myalgo-ts/dist/iter/repeat.js","webpack:///../myalgo-ts/dist/iter/wrapper.js","webpack:///../myalgo-ts/dist/map/bimap.js","webpack:///../myalgo-ts/dist/map/dictionary.js","webpack:///../myalgo-ts/dist/map/groupBy.js","webpack:///../myalgo-ts/dist/map/index.js","webpack:///../myalgo-ts/dist/map/join.js","webpack:///../myalgo-ts/dist/map/sortedTrie.js","webpack:///../myalgo-ts/dist/map/trie.js","webpack:///../myalgo-ts/dist/math2D.js","webpack:///../myalgo-ts/dist/memo.js","webpack:///../myalgo-ts/dist/mut.js","webpack:///../myalgo-ts/dist/numbers.js","webpack:///../myalgo-ts/dist/rand/diamondSquare.js","webpack:///../myalgo-ts/dist/rand/index.js","webpack:///../myalgo-ts/dist/rand/randomGen.js","webpack:///../myalgo-ts/dist/rand/shuffleSlice.js","webpack:///../myalgo-ts/dist/set/biset.js","webpack:///../myalgo-ts/dist/set/difference.js","webpack:///../myalgo-ts/dist/set/index.js","webpack:///../myalgo-ts/dist/set/intersect.js","webpack:///../myalgo-ts/dist/set/unionfind.js","webpack:///../myalgo-ts/dist/set/wrapper.js","webpack:///../myalgo-ts/dist/tuple.js","webpack:///./build/database.js","webpack:///./build/index.js","webpack:///./build/model/def.js","webpack:///./build/view/CanvasOperator.js","webpack:///./build/view/GalaxyView.js","webpack:///./build/view/NationView.js","webpack:///./build/view/PeopleView.js","webpack:///./build/view/PlanetView.js","webpack:///./build/view/PlayerView.js","webpack:///./build/view/SearchView.js","webpack:///./build/view/StationView.js","webpack:///./build/view/SwitchView.js","webpack:///./build/view/def.js","webpack:///./build/view/helper.js","webpack:///./galaxy.js"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,qDAAW;AAC5B,SAAS,mBAAO,CAAC,2DAAc;AAC/B,2CAA2C,mM;;;;;;;;;;;;ACP9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA,eAAe,+CAA+C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,kCAAkC;AAClC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+mN;;;;;;;;;;;;ACnL9B;AACb,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,gFAA4B;AAC3D,gBAAgB,mBAAO,CAAC,kEAAqB;AAC7C,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAgD;AAChE,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,u4N;;;;;;;;;;;;ACzJ9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2CAA2C,25C;;;;;;;;;;;;ACtC9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mjO;;;;;;;;;;;;AC5K9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,2BAA2B;AAC3B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,usD;;;;;;;;;;;;ACxC9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,oEAAgB;AACjC,SAAS,mBAAO,CAAC,0DAAW;AAC5B,SAAS,mBAAO,CAAC,4DAAY;AAC7B,SAAS,mBAAO,CAAC,sDAAS;AAC1B,SAAS,mBAAO,CAAC,oDAAQ;AACzB,2CAA2C,+P;;;;;;;;;;;;ACV9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+gB;;;;;;;;;;;;ACZ9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,4DAAkB;AAC5C,uBAAuB,mBAAO,CAAC,oEAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2/G;;;;;;;;;;;;AC5E9B;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,gDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,2CAA2C,2jC;;;;;;;;;;;;ACpC9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,4DAAkB;AAC5C,gBAAgB,mBAAO,CAAC,4CAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+pI;;;;;;;;;;;;AC3H9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mzC;;;;;;;;;;;;AChC9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA,wEAAwE;AACxE,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2pC;;;;;;;;;;;;AC9B9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC,2BAA2B,WAAW;AACtC,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,u3F;;;;;;;;;;;;ACnE9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,iDAAS;AAC1B,SAAS,mBAAO,CAAC,iFAAyB;AAC1C,SAAS,mBAAO,CAAC,6EAAuB;AACxC,SAAS,mBAAO,CAAC,iEAAiB;AAClC,SAAS,mBAAO,CAAC,2DAAc;AAC/B,SAAS,mBAAO,CAAC,mEAAkB;AACnC,2CAA2C,uQ;;;;;;;;;;;;ACX9B;AACb,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,4DAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,ulD;;;;;;;;;;;;AC7C9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,4DAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uvE;;;;;;;;;;;;AC1D9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,iDAAS;AAC1B,SAAS,mBAAO,CAAC,iDAAY;AAC7B,SAAS,mBAAO,CAAC,2DAAc;AAC/B,SAAS,mBAAO,CAAC,iDAAS;AAC1B,SAAS,mBAAO,CAAC,+CAAQ;AACzB,SAAS,mBAAO,CAAC,6CAAO;AACxB,SAAS,mBAAO,CAAC,6CAAU;AAC3B,SAAS,mBAAO,CAAC,yCAAQ;AACzB,SAAS,mBAAO,CAAC,uCAAO;AACxB,SAAS,mBAAO,CAAC,+CAAW;AAC5B,SAAS,mBAAO,CAAC,+CAAQ;AACzB,SAAS,mBAAO,CAAC,6CAAO;AACxB,SAAS,mBAAO,CAAC,2CAAS;AAC1B,2CAA2C,uX;;;;;;;;;;;;AClB9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,oDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uhB;;;;;;;;;;;;AClB9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,oDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+e;;;;;;;;;;;;ACjB9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,oDAAW;AAC5B,SAAS,mBAAO,CAAC,gDAAS;AAC1B,SAAS,mBAAO,CAAC,kDAAU;AAC3B,SAAS,mBAAO,CAAC,oDAAW;AAC5B,2CAA2C,mO;;;;;;;;;;;;ACT9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,oDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+b;;;;;;;;;;;;ACb9B;AACb,8CAA8C,cAAcmBAAmB,wBAAwB;AAC3C;AACA;AACA,2CAA2C,+vM;;;;;;;;;;;;ACvJ9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mkF;;;;;;;;;;;;AC3D9B;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,6CAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA,2CAA2C,2rF;;;;;;;;;;;;AC5D9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2sB;;;;;;;;;;;;AChB9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,+CAAS;AAC1B,SAAS,mBAAO,CAAC,yDAAc;AAC/B,SAAS,mBAAO,CAAC,mDAAW;AAC5B,SAAS,mBAAO,CAAC,6CAAQ;AACzB,SAAS,mBAAO,CAAC,yDAAc;AAC/B,SAAS,mBAAO,CAAC,6CAAQ;AACzB,2CAA2C,uQ;;;;;;;;;;;;ACX9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C,oBAAoB,mBAAO,CAAC,4DAAkB;AAC9C,gBAAgB,mBAAO,CAAC,4CAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uwD;;;;;;;;;;;;ACnC9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,sEAAuB;AACjD,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C,eAAe,mBAAO,CAAC,6CAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA,2CAA2C,mlG;;;;;;;;;;;;AC5D9B;AACb,8CAA8C,cAAc;AAC5D,8BAA8B,mBAAO,CAAC,oFAA8B;AACpE,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C,gBAAgB,mBAAO,CAAC,4CAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,mBAAmB,wBAAwB;AAC3C;AACA;AACA,2CAA2C,20M;;;;;;;;;;;;AC5J9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,+EAA+E;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+sJ;;;;;;;;;;;;ACtH9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,28C;;;;;;;;;;;;AC7C9B;AACb;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2yB;;;;;;;;;;;;ACjB9B;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,iDAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+6C;;;;;;;;;;;;AClD9B;AACb,8CAA8C,cAAc;AAC5D;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,2iK;;;;;;;;;;;;ACxF9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,gEAAiB;AAClC,SAAS,mBAAO,CAAC,wDAAa;AAC9B,SAAS,mBAAO,CAAC,8DAAgB;AACjC,2CAA2C,mN;;;;;;;;;;;;ACR9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,gDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,22D;;;;;;;;;;;;AClD9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,28B;;;;;;;;;;;;ACxB9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+mF;;;;;;;;;;;;ACpE9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2CAA2C,mvB;;;;;;;;;;;;AClB9B;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,+CAAS;AAC1B,SAAS,mBAAO,CAAC,yDAAc;AAC/B,SAAS,mBAAO,CAAC,uDAAa;AAC9B,SAAS,mBAAO,CAAC,uDAAa;AAC9B,SAAS,mBAAO,CAAC,mDAAW;AAC5B,2CAA2C,mP;;;;;;;;;;;;ACV9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C,kBAAkB,mBAAO,CAAC,wDAAgB;AAC1C,kBAAkB,mBAAO,CAAC,mDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mmD;;;;;;;;;;;;ACnC9B;AACb,8CAA8C,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,0DAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAeiDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD,wBAAwB,6DAA6D;AACrF;AACA;AACA,2CAA2C,mxS;;;;;;;;;;;;ACpO9B;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,gDAAS;AAChC,qBAAqB,mBAAO,CAAC,yDAAc;AAC3C,oBAAoB,mBAAO,CAAC,uDAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+xF;;;;;;;;;;;;AC/C9B;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,2CAA2C,uS;;;;;;;;;;;;ACP3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACC;AACK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,yCAAyC;AACzC;AACA;AACA,sBAAsB,uDAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iDAAM;AAC3C;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;ACpPA;AAAA;AAAA;AAAA;AAAA;AAAsE;AAChC;AACI;AACK;AAC/C;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB;AACA,oBAAoB,kDAAQ;AAC5B;AACA;AACA;AACA;AACA,IAAI,yDAAS;AACb;AACA;AACA;AACA,sBAAsB,iDAAS;AAC/B;AACA;AACA,mDAAmD,iDAAS,uBAAuB,iDAAS,aAAa,mDAAW;AACpH;AACA;AACA,gBAAgB,iDAAS;AACzB;AACA;AACA;AACA;AACA,2BAA2B,2DAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,MAAM,WAAW,OAAO;AAC7D;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qBAAqB,YAAY;AACjC,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA,8CAA8C,GAAG;AACjD;AACA;AACA,SAAS;AACT;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yDAAyD,oBAAoB;AAC7E,2DAA2D,qBAAqB;AAChF;AACA,SAAS;;AAET,8BAA8B,iDAAiD,EAAE;;AAEjF;AACA;AACA;AACA,qDAAqD,kBAAkB,IAAI,aAAa;AACxF,SAAS;;AAET;AACA;AACA,2BAA2B,YAAY;AACvC;AACA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;;AAEA,0CAA0C,UAAU,MAAM,eAAe,MAAM,SAAS;;AAExF;;AAEA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sDAAW,EAAE;AAC9C;AACA,iC;;;;;;;;;;;;AC1QA;AAAA;AAAA;AAAA;AAAA;AAA6D;AAC7D,yBAAyB,oEAAoB;AACtC,4CAA4C;AACnD;AACA;AACA,UAAU,+CAAO;AACjB,0BAA0B,+CAAO;AACjC,uBAAuB,+CAAO;AAC9B;AACO;AACP;AACA;AACO;AACP;AACA,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB,aAAa,+CAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2E;AACrB;AACD;AAC9C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0DAAQ;AAC1B,uBAAuB,sDAAI;AAC3B,kBAAkB,0DAAQ;AAC1B,uBAAuB,sDAAI;AAC3B,wBAAwB,0DAAQ;AAChC,8BAA8B,6DAAW;AACzC,wBAAwB,6DAAW;AACnC;AACA;AACA;AACA;AACA,6BAA6B,qDAAG;AAChC,0BAA0B,qDAAG;AAC7B,uBAAuB,qDAAG;AAC1B;AACA,gEAAgE;AAChE;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA,kBAAkB,6DAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAG;AAC1B;AACA,uBAAuB,0DAAQ;AAC/B,qBAAqB,sDAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yDAAO;AAChC,8BAA8B,0DAAQ;AACtC;AACA;AACA;AACA,kBAAkB,kDAAa,QAAQ,kDAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAsB;AACxD,0C;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACY;AACD;AACI;AACkB;AACpE;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAc;AAC1C,2BAA2B,4CAAU,EAAE,8BAA8B;AACrE,2BAA2B,4CAAU,EAAE,qBAAqB;AAC5D,wBAAwB,4CAAU,QAAQ,YAAY,sDAAoB,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE,4BAA4B,8DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAQ;AAChC;AACA;AACA;AACA,4CAA4C,2CAAM;AAClD;AACA;AACA;AACA;AACA;AACA,+CAA+C,2CAAM;AACrD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,yBAAyB,0DAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2CAAM;AAC3C;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,yBAAyB,0DAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2CAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC,0BAA0B,EAAE,EAAE,EAAE,SAAS,sDAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAkB;AAC1C;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAe;AACjD,kCAAkC,oDAAe;AACjD,gCAAgC,oDAAe;AAC/C;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oBAAoB;AACnE,sC;;;;;;;;;;;;AC9UA;AAAA;AAAA;AACA;AACO;AACP;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACdA;AAAA;AAAA;AACA;AACO;AACP;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACC;AACG;AACS;AACJ;AACL;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,iDAAM;AACxE,oDAAoD,iDAAM;AAC1D,sDAAsD,iDAAM,qDAAqD;AACjH;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2CAAM;AACvD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2CAAM;AACvD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2CAAM;AACvD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2CAAM;AACvD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAS;AAClC,gCAAgC,EAAE,GAAG,yCAAyC;AAC9E;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iCAAiC,0DAAQ;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA,4BAA4B,8DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8BAA8B;AACrE,uCAAuC,qBAAqB;AAC5D,0CAA0C,kCAAkC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAM;AACnC;AACA,sC;;;;;;;;;;;;AC/XA;AAAA;AAAA;AACA;AACO;AACP;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAyC;AACzC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAoD;AACpD;AACA;AACO;AACP;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAa;AACrB,QAAQ,yDAAS;AACjB;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACD;AACC;AACA;AACA;AACA;AACA;AACE;AAC5C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,SAAS,WAAW,sDAAU,4BAA4B;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,0DAA0D,SAAS,WAAW,sDAAU,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,0DAA0D,SAAS,WAAW,sDAAU,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,0DAA0D,SAAS,WAAW,sDAAU,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,0DAA0D,SAAS,WAAW,wDAAW,MAAM;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,0DAA0D,SAAS,WAAW,sDAAU,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sDAAU;AAChC;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACxMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO;AACA;AACA;AACA;AACA;AACP,+B;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACoC;;AAEpC;AACA;AACA,yEAAyE,iDAAW;AACpF,+CAA+C,iDAAW;AAC1D;AACA;AACA;;AAEA;AACA,gBAAgB,4DAAsB;AACtC;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,iDAAW;AACpF,+CAA+C,iDAAW;AAC1D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,yEAAmC;AACrE;AACA;AACA;;AAEA;;AAEA,eAAe,iBAAiB,GAAG,YAAY,GAAG,YAAY,GAAG,aAAa;;AAE9E;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D,mBAAO,CAAC,yCAAM;;AAExE;;AAEA;AACA;AACA,uEAAuE,iDAAW;AAClF,6CAA6C,iDAAW;AACxD;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,4DAAsB;AACtC;AACA;AACA;;AAEA;AACA;AACA,uEAAuE,iDAAW;AAClF,6CAA6C,iDAAW;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,0DAA0D,mBAAO,CAAC,yCAAM;;AAExE;;AAEA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACO;AACP,WAAW,iEAA2B;AACtC;;AAEA;AACA,YAAY;AACZ;AACO;AACP,WAAW,+DAAyB;AACpC;;AAEA;AACA;AACO,iCAAiC,gDAAgD;AACxF;AACA;AACO,mCAAmC,mCAAmC;AAC7E;AACA;AACO,iCAAiC,iCAAiC;AACzE;AACA;AACO,mCAAmC,gCAAgC;AAC1E;AACA;AACO,+BAA+B,wSAAwS;AAC9U;AACA;AACO,sCAAsC,8IAA8I;AAC3L;AACA,YAAY;AACZ;AACO;AACP,WAAW,oDAAc;AACzB;;AAEA;;AAEO;AACP;;AAEA;AACA,IAAI,0DAAoB;;AAExB;AACA;;AAEA;;AAEO;AACP;AACA;;AAEA;;AAEA,IAAI,8DAAwB;AAC5B;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,sEAAgC;AACpC;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,0EAAoC;AAC5C;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,gFAA0C;AACzD;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,4EAAsC;AAC9C;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;;AAEA;;AAEA,IAAI,8DAAwB;AAC5B;AACA;AACA;AACO;AACP;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,oEAA8B;AAC7C;AACA;AACA,eAAe,oEAA8B;AAC7C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,mEAA6B;AAC5C;AACA;AACA,eAAe,mEAA6B;AAC5C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,qEAA+B;AAC9C;AACA;AACA,eAAe,qEAA+B;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,mEAA6B;AAC5C;AACA;AACA,eAAe,mEAA6B;AAC5C;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,yEAAmC;AAClD;AACA;AACA,eAAe,yEAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,mEAA6B;AACjC;AACA;AACA;AACO;AACP;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,sFAAgD;AAC/D;AACA;AACA,eAAe,sFAAgD;AAC/D;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,sEAAgC;AAC/C;AACA;AACA,eAAe,sEAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,4DAAsB;AAC1B;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,6BAA6B,qDAAe;AAC5C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,kEAA4B;AAC3C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,gBAAgB,8DAAwB;AACxC;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,gBAAgB,gEAA0B;AAC1C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,qEAA+B;AAC9C;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,kEAA4B;AAC3C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,0BAA0B,gEAA0B;AACpD;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,qEAA+B;AACzD;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,0BAA0B,uEAAiC;AAC3D;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,8DAAwB;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uEAAiC;AAChD;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,gCAAgC,gEAA0B;AAC1D;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,mEAA6B;AACrC;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;AACA,cAAc,IAAI;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,2EAAqC;AACpD;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,qEAA+B;AAC9C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,0BAA0B,kFAA4C;AACtE;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,gBAAgB,8DAAwB;AACxC;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,gEAA0B;AACzC;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,kEAA4B;AAC3C;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,mEAA6B;AAC5C;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,mEAA6B;AAC5C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,iEAA2B;AACnC;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,kEAA4B;AACpC;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,iEAA2B;AACnC;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA;AACA,QAAQ,kEAA4B;AACpC;AACA;AACA;;AAEA;AACA,QAAQ,0DAAoB;AAC5B;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,gEAA0B;AACvD;AACA;AACA,cAAc,IAAI;AAClB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA,eAAe,uEAAiC;AAChD;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,0BAA0B,uEAAiC;AAC3D;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,gEAA0B;AACzC;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,uEAAiC;AAChD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0BAA0B,2EAAqC;AAC/D;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0BAA0B,0EAAoC;AAC9D;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0BAA0B,2EAAqC;AAC/D;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB;AAChB;AACA;AACA,eAAe,yEAAmC;AAClD;AACA;;AAEA;;AAEA,IAAI,+DAAyB;AAC7B;AACA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,6EAAuC;AACtD;AACA;AACA,eAAe,6EAAuC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,+DAAyB;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,8DAAwB;AACvC;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA","file":"0.bundle.js","sourcesContent":["\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./minheap\"));\r\n__export(require(\"./sortedList\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBMEI7QUFDMUIsa0NBQTZCIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Array-based binary heap.\r\n */\r\nclass MinHeap extends wrapper_1.MyIterable {\r\n    constructor(cmp) {\r\n        super();\r\n        this.cmp = cmp;\r\n        this.arr = [];\r\n        /** Remove the most important (minimum) item in the heap. This action mutates the heap. */\r\n        this.pop = () => {\r\n            const ret = pop(this.arr, this.arr.length, this.cmp);\r\n            const poped = this.arr.pop();\r\n            console.assert(ret === poped);\r\n            return ret;\r\n        };\r\n        /**\r\n         * Sort the collection in reverse order (i.e. low-to-high priority of MIN\r\n         * heap <-- note MIN). This method resets the heap and mutate the data array in-place.\r\n         */\r\n        this.reverseSort = () => {\r\n            const arr = this.arr;\r\n            this.arr = []; // clears the array in case for reusing this heap\r\n            for (let len = arr.length; len > 0; len--) {\r\n                // pop works by swapping the root to the end and then correct the structure by bubbledown the root\r\n                pop(arr, len, this.cmp);\r\n            }\r\n            return arr;\r\n        };\r\n        /**\r\n         * Sort the collection in order (i.e. high-to-low priority of MIN heap <-- note MIN).\r\n         * This method resets the heap and mutate the data array in-place.\r\n         */\r\n        this.sortInPlace = () => {\r\n            const sorted = this.reverseSort();\r\n            let first = 0;\r\n            let last = sorted.length - 1;\r\n            // reverse the reverse-sorted array\r\n            while (first < last) {\r\n                swap(sorted, first, last);\r\n                ++first;\r\n                --last;\r\n            }\r\n            return sorted;\r\n        };\r\n        /**\r\n         * Sort the collection in order (i.e. high-to-low priority of MIN heap <-- note MIN).\r\n         * This operation doesn't mutate the heap but a slice of the sorted data will be created.\r\n         */\r\n        this.sort = () => {\r\n            const ret = this.sortHelper();\r\n            return wrapper_1.wrapIt(ret);\r\n        };\r\n        /**\r\n         * Add an item into the heap.\r\n         */\r\n        this.add = (data) => {\r\n            const idx = this.arr.length;\r\n            this.arr.push(data);\r\n            bubbleUp(this.arr, idx, this.cmp);\r\n        };\r\n        this.iterate = () => {\r\n            return this.sortHelper();\r\n        };\r\n        this.sortHelper = () => {\r\n            return sort(this.arr.slice(), this.cmp);\r\n        };\r\n    }\r\n    /**\r\n     * Make an array copy of it and heapify it.\r\n     * @param it the data\r\n     * @param cmp the comparator\r\n     */\r\n    static heapify(cmp, ...arr) {\r\n        return MinHeap.inPlaceWrap(cmp, arr);\r\n    }\r\n    /**\r\n     * Create a heap in-place by mutating the given array. The caller should consider the ownership of arr.\r\n     * @param arr an array to be mutated in-place\r\n     * @param cmp the comparator\r\n     */\r\n    static inPlaceWrap(cmp, arr) {\r\n        return MinHeap.unsafeWrap(heapifyArray(arr, cmp), cmp);\r\n    }\r\n    /**\r\n     * Wraps a heapified array into a MinHeap without any checking whatsoever.\r\n     * @param arr an heapified array slice, presumably generated from MinHeap.slice()\r\n     * @param cmp the comparator\r\n     */\r\n    static unsafeWrap(arr, cmp) {\r\n        const ret = new MinHeap(cmp);\r\n        ret.arr = arr;\r\n        return ret;\r\n    }\r\n    /** Returns the number of items in the heap */\r\n    get size() { return this.arr.length; }\r\n    /** Get the most important (minimum) item in the heap. */\r\n    get top() { return this.isEmpty ? undefined : this.arr[0]; }\r\n}\r\nexports.MinHeap = MinHeap;\r\nfunction* sort(heapifiedArray, cmp) {\r\n    const arr = heapifiedArray;\r\n    let val = pop(arr, arr.length, cmp);\r\n    while (val !== undefined) {\r\n        yield arr.pop();\r\n        val = pop(arr, arr.length, cmp);\r\n    }\r\n}\r\nfunction heapifyArray(arr, cmp) {\r\n    for (let i = Math.floor((arr.length - 1) / 2); i >= 0; i--) {\r\n        bubbleDown(arr, i, arr.length, cmp);\r\n    }\r\n    return arr;\r\n}\r\nfunction parent(n) {\r\n    return Math.floor((n + 1) / 2) - 1;\r\n}\r\nfunction leftChild(i) {\r\n    return 2 * i + 1;\r\n}\r\nfunction swap(arr, i, j) {\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n// pop swaps the root to the end of the array; caller is responsible for memeory management\r\n// not handling memory here because pop() is crucial for the in-place sort\r\nfunction pop(arr, length, cmp) {\r\n    const lenMinus = length - 1;\r\n    if (length === 0) {\r\n        return;\r\n    }\r\n    else if (length === 1) {\r\n        // since this method only does swapping in arr, there's no need to swap when arr only has 1 item\r\n        return arr[lenMinus];\r\n    }\r\n    const ret = arr[0];\r\n    swap(arr, 0, lenMinus); // replace root with the last element and then bubbledown\r\n    bubbleDown(arr, 0, lenMinus, cmp);\r\n    return ret;\r\n}\r\nfunction bubbleDown(arr, startIdx, length, cmp) {\r\n    const itemVal = arr[startIdx];\r\n    let prev = startIdx; // iterator starting at the root node defined by start\r\n    while (true) {\r\n        let candidate = leftChild(prev);\r\n        if (candidate >= length) { // left-child doesn't exist\r\n            break; // implied that right child doesn't exist too\r\n        }\r\n        // children found, pick the lowest of the 2 children\r\n        const left = arr[candidate];\r\n        const rightIdx = candidate + 1;\r\n        if (rightIdx < length && // right-child exists and\r\n            cmp(arr[rightIdx], left) < 0 // right child is less than left-child\r\n        ) {\r\n            candidate = rightIdx; // pick the right child\r\n        }\r\n        // compare \"me\" with the lowest child\r\n        if (cmp(itemVal, arr[candidate]) < 0) {\r\n            break; // \"I\" am the lowest\r\n        }\r\n        swap(arr, prev, candidate);\r\n        prev = candidate;\r\n    }\r\n}\r\nfunction bubbleUp(arr, startIdx, cmp) {\r\n    console.assert(startIdx === arr.length - 1);\r\n    // keep swapping with ancestors if the given item is smaller than them\r\n    let cur = startIdx;\r\n    while (cur > 0) {\r\n        const par = parent(cur);\r\n        if (cmp(arr[cur], arr[par]) < 0) {\r\n            swap(arr, cur, par);\r\n        }\r\n        cur = par;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaGVhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcnJheS9taW5oZWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXFEO0FBRXJEOztHQUVHO0FBQ0gsTUFBYSxPQUFXLFNBQVEsb0JBQWE7SUFtQ3pDLFlBQW9CLEdBQTJCO1FBQzNDLEtBQUssRUFBRSxDQUFDO1FBRFEsUUFBRyxHQUFILEdBQUcsQ0FBd0I7UUFGdkMsUUFBRyxHQUFRLEVBQUUsQ0FBQztRQVN0QiwwRkFBMEY7UUFDbkYsUUFBRyxHQUFHLEdBQUcsRUFBRTtZQUNkLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQzlCLE9BQU8sR0FBRyxDQUFDO1FBQ2YsQ0FBQyxDQUFBO1FBS0Q7OztXQUdHO1FBQ0ksZ0JBQVcsR0FBRyxHQUFHLEVBQUU7WUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLGlEQUFpRDtZQUNoRSxLQUFLLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDdkMsa0dBQWtHO2dCQUNsRyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDM0I7WUFDRCxPQUFPLEdBQUcsQ0FBQztRQUNmLENBQUMsQ0FBQTtRQUVEOzs7V0FHRztRQUNJLGdCQUFXLEdBQUcsR0FB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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst binarySearch_1 = require(\"../comparison/binarySearch\");\r\nconst merge_1 = require(\"../comparison/merge\");\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * A sorted list, only valid as long as data mutation doesn't affect toKey()'s return values. It\r\n * performs lazy insertion, at the cost of other operations, which potentially leads binary merges (think merge sort).\r\n * Readings are as fast as binary search can offer.\r\n * Using this structure either if you need to frequent writes or freqent reads, but not both.\r\n */\r\nclass SortedList extends wrapper_1.MyIterable {\r\n    constructor(toKey, cmp) {\r\n        super();\r\n        this.toKey = toKey;\r\n        this.cmp = cmp;\r\n        this.data = [];\r\n        /**\r\n         * Unsorted list of items to be inserted into this.data whenever necessary.\r\n         */\r\n        this.pendList = [];\r\n        /**\r\n         * Insert items into the list.\r\n         */\r\n        this.add = (...items) => {\r\n            this.pendList.push(...items);\r\n            return this;\r\n        };\r\n        this.has = (key) => {\r\n            return this.search(key) !== undefined;\r\n        };\r\n        this.clone = () => SortedList.lightWrap(this.getData().slice(), this.toKey, this.cmp);\r\n        this.slice = (start, end) => this.getData().slice(start, end);\r\n        /**\r\n         * Get everything from the target and above.\r\n         */\r\n        this.right = (key) => SortedList.lightWrap(right(this.getData(), key, this.toKey, this.cmp), this.toKey, this.cmp);\r\n        /**\r\n         * Get everything lower and equal to the target.\r\n         */\r\n        this.left = (key) => SortedList.lightWrap(left(this.getData(), key, this.toKey, this.cmp), this.toKey, this.cmp);\r\n        /** Get items found by the boundary. If nothing is found, return an empty array. */\r\n        this.get = (bound1, bound2) => {\r\n            const r = bound2 === undefined ?\r\n                this.search(bound1) :\r\n                this.range(bound1, bound2);\r\n            if (r === undefined) {\r\n                return [];\r\n            }\r\n            const [low, high] = r;\r\n            return this.slice(low, high + 1);\r\n        };\r\n        this.range = (bound1, bound2) => {\r\n            if (this.isEmpty) {\r\n                return undefined;\r\n            }\r\n            return binarySearch_1.binarySearchRange(this.getData(), bound1, bound2, this.toKey, this.cmp);\r\n        };\r\n        /** Count the number of elements within the boundary */\r\n        this.countRange = (bound1, bound2) => {\r\n            if (this.isEmpty) {\r\n                return 0;\r\n            }\r\n            const r = bound2 === undefined ?\r\n                this.search(bound1) :\r\n                this.range(bound1, bound2);\r\n            if (r === undefined) {\r\n                return 0;\r\n            }\r\n            const [low, high] = r;\r\n            const ret = high - low + 1;\r\n            return ret;\r\n        };\r\n        /** Get an item by its index. Not sure how this is useful when the point of\r\n         * this data structure is range search (with get()).\r\n         */\r\n        this.getAt = (idx) => {\r\n            return this.getData()[idx];\r\n        };\r\n        /** Delete items specified by the index. */\r\n        this.deleteAt = (idx, len = 1) => {\r\n            console.assert(len >= 0);\r\n            if (len >= 1) {\r\n                if (idx >= 0 && idx < this.size) {\r\n                    this.getData().splice(idx, len); // this.getData() would possibly perform sort and merge\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Delete everything that equals item\r\n         * @param key the target\r\n         */\r\n        this.delete = (key) => {\r\n            if (this.isEmpty) {\r\n                return this;\r\n            }\r\n            const data = this.getData();\r\n            const range1 = binarySearch_1.binarySearch(data, key, this.toKey, this.cmp);\r\n            if (range1 === undefined) {\r\n                return this;\r\n            }\r\n            const [low, high] = range1;\r\n            const len = high - low + 1;\r\n            console.assert(len >= 1);\r\n            data.splice(low, len);\r\n            return this;\r\n        };\r\n        /**\r\n         * Returns a range that contains the target and its duplicates\r\n         * @param key the target\r\n         */\r\n        this.search = (key) => binarySearch_1.binarySearch(this.getData(), key, this.toKey, this.cmp);\r\n        this.iterate = () => this.getData();\r\n        this.getData = () => {\r\n            if (this.pendList.length > 0) {\r\n                const sortedPending = SortedList.sort(this.pendList, this.toKey, this.cmp);\r\n                this.data = merge_1.mergeK(this.toKey, this.cmp, sortedPending, this.data);\r\n                this.pendList = [];\r\n            }\r\n            return this.data;\r\n        };\r\n    }\r\n    static wrap(data, toKey, cmp) {\r\n        const sorted = SortedList.sort(Array.from(data), toKey, cmp);\r\n        return SortedList.lightWrap(sorted, toKey, cmp);\r\n    }\r\n    static lightWrap(data, toKey, cmp) {\r\n        const ret = new SortedList(toKey, cmp);\r\n        ret.data = data;\r\n        return ret;\r\n    }\r\n    static sort(data, toKey, cmp) {\r\n        return data.sort((a, b) => cmp(toKey(a), toKey(b)));\r\n    }\r\n    get size() { return this.data.length + this.pendList.length; }\r\n    get isEmpty() { return this.size === 0; }\r\n}\r\nexports.SortedList = SortedList;\r\nfunction right(data, item, toKey, cmp) {\r\n    if (data.length === 0) {\r\n        return [];\r\n    }\r\n    const idx = binarySearch_1.lowerBound(data, item, toKey, cmp);\r\n    return data.slice(idx);\r\n}\r\nfunction left(data, item, toKey, cmp) {\r\n    if (data.length === 0) {\r\n        return [];\r\n    }\r\n    const idx = binarySearch_1.upperBound(data, item, toKey, cmp);\r\n    return data.slice(0, idx + 1);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcnJheS9zb3J0ZWRMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBQXFHO0FBQ3JHLCtDQUE2QztBQUM3Qyw2Q0FBNkM7QUFFN0M7Ozs7O0dBS0c7QUFDSCxNQUFhLFVBQWlCLFNBQVEsb0JBQWE7SUErQi9DLFlBQ1ksS0FBa0IsRUFDbEIsR0FBMkI7UUFFbkMsS0FBSyxFQUFFLENBQUM7UUFIQSxVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2xCLFFBQUcsR0FBSCxHQUFHLENBQXdCO1FBVC9CLFNBQUksR0FBUSxFQUFFLENBQUM7UUFFdkI7O1dBRUc7UUFDSyxhQUFRLEdBQVEsRUFBRSxDQUFDO1FBUzNCOztXQUVHO1FBQ0ksUUFBRyxHQUFHLENBQUMsR0FBRyxLQUFVLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzdCLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQTtRQUVNLFFBQUcsR0FBRyxDQUFDLEdBQU0sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLENBQUM7UUFDMUMsQ0FBQyxDQUFBO1FBTU0sVUFBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpGLFVBQUssR0FBRyxDQUFDLEtBQWMsRUFBRSxHQUFZLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWxGOztXQUVHO1FBQ0ksVUFBSyxHQUFHLENBQUMsR0FB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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction reorder(bound1, bound2) {\r\n    let low;\r\n    let high;\r\n    if (bound1 > bound2) {\r\n        low = bound2;\r\n        high = bound1;\r\n    }\r\n    else {\r\n        low = bound1;\r\n        high = bound2;\r\n    }\r\n    return [low, high];\r\n}\r\n/** Ensure the val is fixed between the boundaries. */\r\nfunction clamp(val, bound1, bound2) {\r\n    const [low, high] = reorder(bound1, bound2);\r\n    return Math.min(high, Math.max(low, val));\r\n}\r\nexports.clamp = clamp;\r\n/**\r\n *  Returns an indicator between 0 and 1 from the low side.\r\n *  Use 1-position to get an indicator from the high side.\r\n */\r\nfunction position(cursor, bound1, bound2) {\r\n    const [low, high] = reorder(bound1, bound2);\r\n    const numerator = cursor - low;\r\n    const denominator = high - low;\r\n    if (numerator < 0) {\r\n        return 0; // none\r\n    }\r\n    if (denominator === 0) {\r\n        return 1; // infinity\r\n    }\r\n    return Math.min(1, numerator / denominator);\r\n}\r\nexports.position = position;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRhcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTLE9BQU8sQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUMzQyxJQUFJLEdBQUcsQ0FBQztJQUNSLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxNQUFNLEdBQUcsTUFBTSxFQUFFO1FBQ2pCLEdBQUcsR0FBRyxNQUFNLENBQUM7UUFDYixJQUFJLEdBQUcsTUFBTSxDQUFDO0tBQ2pCO1NBQU07UUFDSCxHQUFHLEdBQUcsTUFBTSxDQUFDO1FBQ2IsSUFBSSxHQUFHLE1BQU0sQ0FBQztLQUNqQjtJQUNELE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUVELHNEQUFzRDtBQUN0RCxTQUFnQixLQUFLLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxNQUFjO0lBQzdELE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUhELHNCQUdDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFDLE1BQWMsRUFBRSxNQUFjLEVBQUUsTUFBYztJQUNuRSxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUMsTUFBTSxTQUFTLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBRS9CLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtRQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTztLQUNwQjtJQUNELElBQUksV0FBVyxLQUFLLENBQUMsRUFBRTtRQUNuQixPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDeEI7SUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBWkQsNEJBWUMifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction binsearchHelper(arr, target, toKey, cmp, low, high) {\r\n    while (low <= high) {\r\n        const mid = Math.floor((low + high) / 2);\r\n        const midVal = toKey(arr[mid]);\r\n        const order = cmp(midVal, target);\r\n        if (!Number.isFinite(order)) {\r\n            throw new Error(\"cmp doesn't return finite number\");\r\n        }\r\n        if (order < 0) {\r\n            low = mid + 1;\r\n        }\r\n        else if (order > 0) {\r\n            high = mid - 1;\r\n        }\r\n        else {\r\n            return [mid, low, high];\r\n        }\r\n    }\r\n    return [undefined, low, high];\r\n}\r\nfunction findLeft(arr, target, toKey, cmp, ret, oldLow) {\r\n    let prev = ret;\r\n    let prevLow = oldLow;\r\n    while (true) {\r\n        const rightMost = prev - 1;\r\n        const [foundAt, low] = binsearchHelper(arr, target, toKey, cmp, prevLow, rightMost);\r\n        if (foundAt === undefined) {\r\n            return prev;\r\n        }\r\n        console.assert(foundAt <= rightMost); // i.e. progress\r\n        prev = foundAt;\r\n        prevLow = low;\r\n    }\r\n}\r\nfunction findRight(arr, target, toKey, cmp, ret, oldHigh) {\r\n    let prev = ret;\r\n    let prevHigh = oldHigh;\r\n    while (true) {\r\n        const leftMost = prev + 1;\r\n        const [foundAt, , high] = binsearchHelper(arr, target, toKey, cmp, leftMost, prevHigh);\r\n        if (foundAt === undefined) {\r\n            return prev;\r\n        }\r\n        console.assert(foundAt >= leftMost); // i.e. progress\r\n        prev = foundAt;\r\n        prevHigh = high;\r\n    }\r\n}\r\n/**\r\n * Perform binary search for the first index that matches the target. If not\r\n * found, return 0 if target is less than every items in the array, otherwise arr.length.\r\n */\r\nfunction lowerBound(arr, target, toKey, cmp) {\r\n    if (arr.length === 0) {\r\n        return 0;\r\n    }\r\n    const [foundAt, low] = binsearchHelper(arr, target, toKey, cmp, 0, arr.length - 1);\r\n    if (foundAt === undefined) {\r\n        return low;\r\n    }\r\n    return findLeft(arr, target, toKey, cmp, foundAt, low);\r\n}\r\nexports.lowerBound = lowerBound;\r\n/**\r\n * Perform binary search for the last index that matches the target.\r\n * If not found, return 0 if target is less than every items in the array,\r\n * otherwise arr.length.\r\n */\r\nfunction upperBound(arr, target, toKey, cmp) {\r\n    if (arr.length === 0) {\r\n        return 0;\r\n    }\r\n    const [foundAt, low, high] = binsearchHelper(arr, target, toKey, cmp, 0, arr.length - 1);\r\n    if (foundAt === undefined) {\r\n        return low;\r\n    }\r\n    return findRight(arr, target, toKey, cmp, foundAt, high);\r\n}\r\nexports.upperBound = upperBound;\r\n/**\r\n * Binary search to get a range where the target is matched.\r\n */\r\nfunction binarySearch(arr, target, toKey, cmp) {\r\n    if (arr.length === 0) {\r\n        return undefined;\r\n    }\r\n    // use binary search to find the duplicates\r\n    {\r\n        const [foundAt, low, high] = binsearchHelper(arr, target, toKey, cmp, 0, arr.length - 1);\r\n        if (foundAt === undefined) {\r\n            return undefined;\r\n        }\r\n        const lowFinal = findLeft(arr, target, toKey, cmp, foundAt, low);\r\n        const highFinal = findRight(arr, target, toKey, cmp, foundAt, high);\r\n        return [lowFinal, highFinal];\r\n    }\r\n}\r\nexports.binarySearch = binarySearch;\r\n/**\r\n * Test whether an item exist in the array. Just binary search.\r\n */\r\nfunction binarySearchExist(arr, target, toKey, cmp) {\r\n    if (arr.length === 0) {\r\n        return undefined;\r\n    }\r\n    const [isFound] = binsearchHelper(arr, target, toKey, cmp, 0, arr.length - 1);\r\n    return isFound !== undefined;\r\n}\r\nexports.binarySearchExist = binarySearchExist;\r\n/**\r\n * Insert an item to a sorted array, search with binary search, O(n) due to copying.\r\n *  This algorithm mutates arr. This function mutates the array.\r\n */\r\nfunction binaryInsert(arr, target, toKey, cmp) {\r\n    if (arr.length === 0) {\r\n        return [target];\r\n    }\r\n    const idx = lowerBound(arr, toKey(target), toKey, cmp);\r\n    const empty = arr.splice(idx, 0, target);\r\n    console.assert(empty.length === 0);\r\n    return arr;\r\n}\r\nexports.binaryInsert = binaryInsert;\r\n/**\r\n * Delete item and its duplicates from a sorted array.\r\n */\r\nfunction binaryDelete(arr, item, toKey, cmp) {\r\n    if (arr.length !== 0) {\r\n        const range1 = binarySearch(arr, item, toKey, cmp);\r\n        if (range1 !== undefined) {\r\n            const [low, high] = range1;\r\n            const len = high - low + 1;\r\n            arr.splice(low, len);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\nexports.binaryDelete = binaryDelete;\r\n/**\r\n * Perform a range search on a boundary fromed by bound1 and bound2. The order of bound1 and bound2 doesn't matter.\r\n */\r\nfunction binarySearchRange(arr, bound1, bound2, toKey, cmp) {\r\n    if (arr.length === 0) {\r\n        return undefined;\r\n    }\r\n    let low;\r\n    let high;\r\n    const order = cmp(bound1, bound2);\r\n    if (order < 0) {\r\n        low = bound1;\r\n        high = bound2;\r\n    }\r\n    else if (order > 0) {\r\n        low = bound2;\r\n        high = bound1;\r\n    }\r\n    else {\r\n        // just binary search\r\n        return binarySearch(arr, bound1, toKey, cmp);\r\n    }\r\n    const lowB = lowerBound(arr, low, toKey, cmp);\r\n    let upperB = upperBound(arr, high, toKey, cmp);\r\n    if (upperB === arr.length && arr.length > 0) {\r\n        // upperBound finds the last index where high is located, but high is greater than all items in arr, so the upperbound is arr.length by definition. This method, on the other hand, return a range defined by 2 indices of the array.\r\n        upperB = arr.length - 1;\r\n    }\r\n    console.assert(lowB <= upperB);\r\n    return [lowB, upperB];\r\n}\r\nexports.binarySearchRange = binarySearchRange;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJ5U2VhcmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBhcmlzb24vYmluYXJ5U2VhcmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsU0FBUyxlQUFlLENBQ3BCLEdBQVEsRUFDUixNQUFTLEVBQ1QsS0FBa0IsRUFDbEIsR0FBMkIsRUFDM0IsR0FBVyxFQUNYLElBQVk7SUFHWixPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDaEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQUM7UUFDaEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDdkQ7UUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUNqQjthQUFNLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNsQixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUNsQjthQUFNO1lBQ0gsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDM0I7S0FDSjtJQUVELE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FDYixHQUFRLEVBQ1IsTUFBUyxFQUNULEtBQWtCLEVBQ2xCLEdBQTJCLEVBQzNCLEdBQVcsRUFDWCxNQUFjO0lBR2QsSUFB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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/** comparator of lists, compared item-by-item. */\r\nfunction cmpList(cmp, as, bs) {\r\n    const [cmpResult] = cmpListHelper(cmp, as, bs);\r\n    return cmpResult;\r\n}\r\nexports.cmpList = cmpList;\r\nfunction listEqual(cmp, as, bs) {\r\n    return cmpList(cmp, as, bs) === 0;\r\n}\r\nexports.listEqual = listEqual;\r\n/** Find the first index where as and bs diverge. */\r\nfunction listDiff(cmp, as, bs) {\r\n    const [, diffAt] = cmpListHelper(cmp, as, bs);\r\n    return diffAt;\r\n}\r\nexports.listDiff = listDiff;\r\n/** returns [comparator result, difference location (or undefined if both lists are equal)] */\r\nfunction cmpListHelper(cmp, as, bs) {\r\n    let i = 0;\r\n    while (true) {\r\n        if (i === as.length) {\r\n            if (i === bs.length) {\r\n                return [0, undefined]; // as and bs have same length, run out of items to compare\r\n            }\r\n            return [-1, i]; // as is shorter than bs and they share the same prefix\r\n        }\r\n        if (i === bs.length) {\r\n            return [1, i]; // bs is shorter\r\n        }\r\n        const a = as[i];\r\n        const b = bs[i];\r\n        const cmpRet = cmp(a, b);\r\n        if (cmpRet !== 0) {\r\n            return [cmpRet, i];\r\n        }\r\n        ++i;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21wTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wYXJpc29uL2NtcExpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBa0Q7QUFDbEQsU0FBZ0IsT0FBTyxDQUNuQixHQUEyQixFQUMzQixFQUFPLEVBQ1AsRUFBTztJQUVQLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQyxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBUEQsMEJBT0M7QUFFRCxTQUFnQixTQUFTLENBQ3JCLEdBQTJCLEVBQzNCLEVBQU8sRUFDUCxFQUFPO0lBRVAsT0FBTyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQU5ELDhCQU1DO0FBRUQsb0RBQW9EO0FBQ3BELFNBQWdCLFFBQVEsQ0FDcEIsR0FBMkIsRUFDM0IsRUFBTyxFQUNQLEVBQU87SUFFUCxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5QyxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBUEQsNEJBT0M7QUFFRCw4RkFBOEY7QUFDOUYsU0FBUyxhQUFhLENBQ2xCLEdBQTJCLEVBQzNCLEVBQU8sRUFDUCxFQUFPO0lBRVAsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsT0FBTyxJQUFJLEVBQUU7UUFDVCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQywwREFBMEQ7YUFDcEY7WUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1REFBdUQ7U0FDMUU7UUFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7U0FDbEM7UUFFRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEIsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2QsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN0QjtRQUNELEVBQUUsQ0FBQyxDQUFDO0tBQ1A7QUFDTCxDQUFDIn0=","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./binarySearch\"));\r\n__export(require(\"./cmpList\"));\r\n__export(require(\"./isSorted\"));\r\n__export(require(\"./merge\"));\r\n__export(require(\"./uniq\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGFyaXNvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9DQUErQjtBQUMvQiwrQkFBMEI7QUFDMUIsZ0NBQTJCO0FBQzNCLDZCQUF3QjtBQUN4Qiw0QkFBdUIifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Test if \"it\" is sorted in ascending order.\r\n */\r\nfunction isSorted(it, cmp) {\r\n    return wrapper_1.wrapIt(it)\r\n        .pin((prev, cur) => cmp(prev, cur) <= 0)\r\n        .every((x) => x);\r\n}\r\nexports.isSorted = isSorted;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNTb3J0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGFyaXNvbi9pc1NvcnRlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF5QztBQUV6Qzs7R0FFRztBQUNILFNBQWdCLFFBQVEsQ0FBSSxFQUFlLEVBQUUsR0FBMkI7SUFDcEUsT0FBTyxnQkFBTSxDQUFDLEVBQUUsQ0FBQztTQUNaLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUpELDRCQUlDIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst minheap_1 = require(\"../array/minheap\");\r\nconst binarySearch_1 = require(\"./binarySearch\");\r\n/**\r\n * The binary heap based, k-way merge algorithm of sorted lists. Merging 2\r\n * lists is specialized to either single-item insertion based on binary search,\r\n * or with multiple items merge sort's binary merge. This method doesn't mutate\r\n * its arguments.\r\n * @param toKey turn list items into values that are compared\r\n * @param cmp the comparator\r\n * @param lists a list of *sorted* lists of Ts\r\n */\r\nfunction mergeK(toKey, cmp, ...lists) {\r\n    const nonEmpty = lists.filter((list) => list.length > 0);\r\n    switch (nonEmpty.length) {\r\n        case 0:\r\n            return [];\r\n        case 1:\r\n            return nonEmpty[0].slice();\r\n        case 2:\r\n            // merge a single item - use binary search\r\n            const list0 = nonEmpty[0];\r\n            const list1 = nonEmpty[1];\r\n            if (list0.length === 1) {\r\n                return binarySearch_1.binaryInsert(list1.slice(), list0[0], toKey, cmp);\r\n            }\r\n            if (list1.length === 1) {\r\n                return binarySearch_1.binaryInsert(list0.slice(), list1[0], toKey, cmp);\r\n            }\r\n            // merge them directly, no need for the fancy loop below\r\n            return Array.from(merge2(list0, list1, toKey, cmp));\r\n    }\r\n    // 3 or more lists -- use heap-based merge\r\n    const heap = minheap_1.MinHeap.inPlaceWrap(([listA, idxA], [listB, idxB]) => cmp(toKey(listA[idxA]), toKey(listB[idxB])), nonEmpty.map((_, i) => [nonEmpty[i], 0]));\r\n    const ret = [];\r\n    while (true) {\r\n        const [lst, idx] = heap.pop();\r\n        ret.push(lst[idx]);\r\n        const next = idx + 1;\r\n        if (heap.size === 0) {\r\n            return next < lst.length ?\r\n                ret.concat(lst.slice(next)) :\r\n                ret;\r\n        }\r\n        if (next < lst.length) {\r\n            heap.add([lst, next]);\r\n        }\r\n    }\r\n}\r\nexports.mergeK = mergeK;\r\nfunction merge2(sorted1, sorted2, toKey, cmp) {\r\n    console.assert(sorted1.length > 0 && sorted2.length > 0); // this part is handled by mergeK\r\n    let idx1 = 0;\r\n    let idx2 = 0;\r\n    const ret = [];\r\n    while (true) {\r\n        const t1 = sorted1[idx1];\r\n        const t2 = sorted2[idx2];\r\n        if (cmp(toKey(t1), toKey(t2)) < 0) {\r\n            ret.push(t1);\r\n            ++idx1;\r\n        }\r\n        else {\r\n            ret.push(t2);\r\n            ++idx2;\r\n        }\r\n        if (idx1 === sorted1.length) {\r\n            return ret.concat(sorted2.slice(idx2));\r\n        }\r\n        if (idx2 === sorted2.length) {\r\n            return ret.concat(sorted1.slice(idx1));\r\n        }\r\n    }\r\n    // unreachable\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcGFyaXNvbi9tZXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUEyQztBQUMzQyxpREFBOEM7QUFFOUM7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFnQixNQUFNLENBQ2xCLEtBQWtCLEVBQ2xCLEdBQTJCLEVBQzNCLEdBQUcsS0FBWTtJQUVmLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFekQsUUFBUSxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQ3JCLEtBQUssQ0FBQztZQUNGLE9BQU8sRUFBRSxDQUFDO1FBQ2QsS0FBSyxDQUFDO1lBQ0YsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDL0IsS0FBSyxDQUFDO1lBQ0YsMENBQTBDO1lBQzFDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDcEIsT0FBTywyQkFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDcEIsT0FBTywyQkFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzVEO1lBRUQsd0RBQXdEO1lBQ3hELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxN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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst iter_1 = require(\"../iter\");\r\n/**\r\n * Return a list of unique values from a sorted list of values in ascending order, based on the given comparator.\r\n * @param sortedVals a sorted list\r\n * @param cmp the comparator\r\n */\r\nfunction uniq(sortedVals, cmp) {\r\n    return iter_1.wrapIt(uniqHelper(sortedVals, cmp));\r\n}\r\nexports.uniq = uniq;\r\nfunction* uniqHelper(sortedVals, cmp) {\r\n    let isFirst = true;\r\n    let cur;\r\n    for (const val of sortedVals) {\r\n        if (isFirst) {\r\n            cur = val;\r\n            isFirst = false;\r\n            continue;\r\n        }\r\n        const order = cmp(val, cur);\r\n        if (order > 0) {\r\n            yield cur;\r\n            cur = val;\r\n        }\r\n        else if (order < 0) {\r\n            throw new Error(\"input iterable is not sorted in ascending order (based on cmp)\");\r\n        }\r\n        // otherwise val and cur are equal\r\n    }\r\n    if (cur === undefined) {\r\n        return;\r\n    }\r\n    yield cur; // either the last value is unique, or the previous value is not unique but haven't reported\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wYXJpc29uL3VuaXEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQ0FBaUM7QUFFakM7Ozs7R0FJRztBQUNILFNBQWdCLElBQUksQ0FBSSxVQUF1QixFQUFFLEdBQTJCO0lBQ3hFLE9BQU8sYUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRkQsb0JBRUM7QUFFRCxRQUFRLENBQUMsQ0FBQyxVQUFVLENBQUksVUFBdUIsRUFBRSxHQUEyQjtJQUV4RSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDbkIsSUFBSSxHQUFPLENBQUM7SUFDWixLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRTtRQUUxQixJQUFJLE9BQU8sRUFBRTtZQUNULEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDVixPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ2hCLFNBQVM7U0FDWjtRQUVELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsTUFBTSxHQUFHLENBQUM7WUFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ2I7YUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0Qsa0NBQWtDO0tBQ3JDO0lBRUQsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1FBQ25CLE9BQU87S0FDVjtJQUVELE1BQU0sR0FBRyxDQUFDLENBQUMsNEZBQTRGO0FBQzNHLENBQUMifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst minheap_1 = require(\"../array/minheap\");\r\nconst tuple_1 = require(\"../tuple\");\r\n/**\r\n * The A* pathfinding algorithm. If \"to\" is left undefined,\r\n * this method act as Dijkstra's algorithm, searching for all destinations from a single source.\r\n * @param vertices The set of vertices\r\n * @param neighbours The neighbours of a given vertex\r\n * @param weight The weight function, distance from vertex u to vertex v.\r\n * @param source The source\r\n * @param destination The destination, if any\r\n * @param heuristic The heuristic function for A*\r\n */\r\nfunction aStar(vertices, neighbours, weight, source, heuristic = () => 0, ...destinations) {\r\n    /*\r\n    modified from https://www.redblobgames.com/pathfinding/a-star/introduction.html\r\n        frontier = PriorityQueue()\r\n        frontier.put(start, 0)\r\n        came_from = {}\r\n        cost_so_far = {}\r\n        came_from[start] = None\r\n        cost_so_far[start] = 0\r\n\r\n        while not frontier.empty():\r\n        current = frontier.get()\r\n\r\n        if current == goal:\r\n            break\r\n\r\n        for next in graph.neighbors(current):\r\n            new_cost = cost_so_far[current] + graph.cost(current, next)\r\n            if next not in cost_so_far or new_cost < cost_so_far[next]:\r\n                cost_so_far[next] = new_cost\r\n                priority = new_cost + heuristic(goal, next)\r\n                frontier.put(next, priority)\r\n                came_from[next] = current\r\n    */\r\n    if (!vertices.has(source)) {\r\n        throw new Error(\"source is not a node in the graph\");\r\n    }\r\n    if (destinations.some((t) => !vertices.has(t))) {\r\n        throw new Error(\"destination is not a node in the graph\");\r\n    }\r\n    const allDest = new Set(destinations);\r\n    if (allDest.has(source)) {\r\n        console.assert(false, \"source and destination are the same, what are you searching for?\");\r\n        return undefined;\r\n    }\r\n    const isDijkstra = destinations.length === 0;\r\n    const distance = new Map([[source, 0]]);\r\n    const parent = new Map();\r\n    const frontier = minheap_1.MinHeap.heapify(([, a], [, b]) => a - b, tuple_1.makePair(source, 0));\r\n    while (!frontier.isEmpty) {\r\n        const [cur] = frontier.pop();\r\n        if (allDest.has(cur)) {\r\n            allDest.delete(cur);\r\n            if (allDest.size === 0) {\r\n                return { distance, parent };\r\n            }\r\n        }\r\n        for (const next of neighbours(cur)) {\r\n            const oldDist = distance.get(next);\r\n            const curDist = distance.get(cur);\r\n            console.assert(curDist !== undefined);\r\n            const partDistance = weight(cur, next);\r\n            console.assert(partDistance !== undefined);\r\n            if (partDistance <= 0) {\r\n                throw new Error(\"weight must be positive (for progress to happen)\");\r\n            }\r\n            const newDist = curDist + partDistance;\r\n            if (oldDist !== undefined && newDist >= oldDist) {\r\n                continue;\r\n            }\r\n            distance.set(next, newDist);\r\n            const estimate = !isDijkstra ?\r\n                Math.min(...destinations.map((t) => heuristic(t, next))) :\r\n                0;\r\n            if (estimate < 0) {\r\n                throw new Error(\"heuristic estimate should be non-negative\");\r\n            }\r\n            const priority = newDist + estimate;\r\n            frontier.add([next, priority]);\r\n            parent.set(next, cur);\r\n        }\r\n    }\r\n    // return something when doing all-destination search\r\n    if (isDijkstra) {\r\n        return { distance, parent };\r\n    }\r\n    // reach here when doing single-destination search but not found the destination\r\n    return undefined;\r\n}\r\nexports.aStar = aStar;\r\n/**\r\n * The A* pathfinding algorithm. If \"to\" is left undefined,\r\n * this method act as Dijkstra's algorithm, searching for all destinations from a single source.\r\n * @param graph The graph as adjacency list.\r\n * @param weight The weight function, distance from vertex u to vertex v.\r\n * @param source The source\r\n * @param destination The destination, if any\r\n * @param heuristic The heuristic function for A*\r\n */\r\nfunction aStarAdjList(graph, weight, source, heuristic = () => 0, ...destinations) {\r\n    return aStar(new Set(graph.keys()), (u) => graph.get(u), // aStar checks nullability\r\n    weight, source, heuristic, ...destinations);\r\n}\r\nexports.aStarAdjList = aStarAdjList;\r\nfunction extractPath(parent, source, destination) {\r\n    let cur = destination;\r\n    const ret = [];\r\n    if (parent.get(cur) === undefined) {\r\n        return undefined; // no valid path\r\n    }\r\n    while (true) {\r\n        ret.push(cur);\r\n        if (cur === source) {\r\n            return ret;\r\n        }\r\n        cur = parent.get(cur);\r\n    }\r\n}\r\nexports.extractPath = extractPath;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYVN0YXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ3JhcGgvYVN0YXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBMkM7QUFFM0Msb0NBQW9DO0FBR3BDOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLEtBQUssQ0FDakIsUUFBZ0IsRUFDaEIsVUFBeUIsRUFDekIsTUFBOEIsRUFDOUIsTUFBUyxFQUNULFlBQW9DLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDM0MsR0FBRyxZQUFpQjtJQUNwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXNCRTtJQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztLQUN4RDtJQUVELElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFdEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGtFQUFrRSxDQUFDLENBQUM7UUFDMUYsT0FBTyxTQUFTLENBQUM7S0FDcEI7SUFFRCxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBWSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBUSxDQUFDO0lBRS9C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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Breadth First, pre-order Traversal\r\n * @param root the root node\r\n * @param neighbours a function that return edges of a node\r\n * @param key turns a node into a unique value, needed if the neighbours\r\n *  are derived values instead of pointing to the actual nodes in the graph, then a key function must be provided.\r\n */\r\nfunction bfsPreOrder(root, neighbours, maxDepth = Infinity) {\r\n    return wrapper_1.wrapIt(bfsPreOrderHelper(root, neighbours, maxDepth));\r\n}\r\nexports.bfsPreOrder = bfsPreOrder;\r\nfunction* bfsPreOrderHelper(root, neighbours, maxDepth) {\r\n    const workList = [[root, 0]];\r\n    const visited = new Set();\r\n    while (workList.length > 0) {\r\n        const [cur, depth] = workList.shift();\r\n        yield [cur, depth];\r\n        visited.add(cur);\r\n        const depth1 = depth + 1;\r\n        if (depth1 <= maxDepth) {\r\n            for (const nei of neighbours(cur)) {\r\n                if (!visited.has(nei)) {\r\n                    visited.add(nei);\r\n                    workList.push([nei, depth1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWR0aEZpcnN0VHJhdmVyc2FsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dyYXBoL2JyZWFkdGhGaXJzdFRyYXZlcnNhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF5QztBQUV6Qzs7Ozs7O0dBTUc7QUFDSCxTQUFnQixXQUFXLENBQ3ZCLElBQU8sRUFDUCxVQUFzQyxFQUN0QyxRQUFRLEdBQUcsUUFBUTtJQUVuQixPQUFPLGdCQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFORCxrQ0FNQztBQUVELFFBQVEsQ0FBQyxDQUFDLGlCQUFpQixDQUN2QixJQUFPLEVBQ1AsVUFBc0MsRUFDdEMsUUFBZ0I7SUFFaEIsTUFBTSxRQUFRLEdBQXVCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBSyxDQUFDO0lBQzdCLE9BQU8sUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFHLENBQUM7UUFDdkMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO1lBQ3BCLEtBQUssTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUNoQzthQUNKO1NBQ0o7S0FDSjtBQUNMLENBQUMifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Depth First, pre-order traversal\r\n * @param root the root node\r\n * @param neighbours a function that return edges of a node\r\n * @param isVisited a function that indicates whether a node is visited; optional if the graph is a tree\r\n * @param markVisited a function that marks a node as visited; optional if the graph is a tree\r\n */\r\nfunction dfsPreOrder(root, neighbours) {\r\n    return wrapper_1.wrapIt(dfsPreOrderHelper(root, neighbours));\r\n}\r\nexports.dfsPreOrder = dfsPreOrder;\r\nfunction* dfsPreOrderHelper(root, neighbours) {\r\n    const workList = [[root, 0]];\r\n    const visited = new Set();\r\n    while (workList.length > 0) {\r\n        const [cur, depth] = workList.pop();\r\n        if (!visited.has(cur)) {\r\n            yield [cur, depth];\r\n            visited.add(cur);\r\n            const depth1 = depth + 1;\r\n            for (const nei of neighbours(cur)) {\r\n                workList.push([nei, depth1]);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.dfsPreOrderHelper = dfsPreOrderHelper;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwdGhGaXJzdFRyYXZlcnNhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaC9kZXB0aEZpcnN0VHJhdmVyc2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXlDO0FBRXpDOzs7Ozs7R0FNRztBQUNILFNBQWdCLFdBQVcsQ0FDdkIsSUFBTyxFQUNQLFVBQXNDO0lBRXRDLE9BQU8sZ0JBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBTEQsa0NBS0M7QUFFRCxRQUFlLENBQUMsQ0FBQyxpQkFBaUIsQ0FDOUIsSUFBTyxFQUNQLFVBQXNDO0lBRXRDLE1BQU0sUUFBUSxHQUF1QixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQUssQ0FBQztJQUU3QixPQUFPLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3hCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVqQixNQUFNLE1BQU0sR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLEtBQUssTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDaEM7U0FDSjtLQUNKO0FBQ0wsQ0FBQztBQW5CRCw4Q0FtQkMifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * All-pair shortest paths, Floyd-Warshall algorithm\r\n * @see https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\r\n */\r\nclass FloydWarshall {\r\n    constructor(graph, weight) {\r\n        /*\r\n        let dist be a |V| * |V| array of minimum distances initialized to Infinity\r\n        let next be a |V| * |V| array of vertex indices initialized to null\r\n\r\n        procedure FloydWarshallWithPathReconstruction ()\r\n        for each edge (u,v)\r\n            dist[u][v] ← w(u,v)  // the weight of the edge (u,v)\r\n            next[u][v] ← v\r\n        for k from 1 to |V| // standard Floyd-Warshall implementation\r\n            for i from 1 to |V|\r\n                for j from 1 to |V|\r\n                    if dist[i][j] > dist[i][k] + dist[k][j] then\r\n                    dist[i][j] ← dist[i][k] + dist[k][j]\r\n                    next[i][j] ← next[i][k]\r\n        */\r\n        this.vertices = [...graph.keys()];\r\n        this.verticesIdx = new Map(Array\r\n            .from(this.vertices)\r\n            .map((v, i) => [v, i]));\r\n        const vSize = graph.size;\r\n        const dist = new Array(vSize);\r\n        // note: next is a reference to this.nextMap, which is a reference to a newly allocated array\r\n        const next = this.nextMap = new Array(vSize);\r\n        for (let i = 0; i < vSize; ++i) {\r\n            dist[i] = new Array(vSize).fill(Infinity);\r\n            next[i] = new Array(vSize);\r\n            dist[i][i] = 0;\r\n        }\r\n        for (const [u, vs] of graph) {\r\n            for (const v of vs) {\r\n                const uIdx = this.verticesIdx.get(u);\r\n                const vIdx = this.verticesIdx.get(v);\r\n                dist[uIdx][vIdx] = weight(u, v);\r\n                next[uIdx][vIdx] = vIdx;\r\n            }\r\n        }\r\n        for (let k = 0; k < vSize; k++) {\r\n            for (let i = 0; i < vSize; ++i) {\r\n                for (let j = 0; j < vSize; j++) {\r\n                    const distIncludeK = dist[i][k] + dist[k][j];\r\n                    if (dist[i][j] > distIncludeK) {\r\n                        dist[i][j] = distIncludeK;\r\n                        next[i][j] = next[i][k];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    next(u, v) {\r\n        const vIdx = this.verticesIdx.get(v);\r\n        const uIdx = this.verticesIdx.get(u);\r\n        const nextIdx = this.nextMap[uIdx][vIdx];\r\n        if (nextIdx !== undefined) {\r\n            return this.vertices[nextIdx];\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexports.FloydWarshall = FloydWarshall;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxveWRXYXJzaGFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaC9mbG95ZFdhcnNoYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0E7OztHQUdHO0FBQ0gsTUFBYSxhQUFhO0lBTXRCLFlBQ0ksS0FBdUIsRUFDdkIsTUFBOEI7UUFFOUI7Ozs7Ozs7Ozs7Ozs7O1VBY0U7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUs7YUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFFekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQVcsS0FBSyxDQUFDLENBQUM7UUFFeEMsNkZBQTZGO1FBQzdGLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQVcsS0FBSyxDQUFDLENBQUM7UUFFdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRTtZQUN6QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUM7Z0JBQ3RDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQzthQUMzQjtTQUNKO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM1QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM3QyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUU7d0JBQzNCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUM7d0JBQzFCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQzNCO2lCQUNKO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFTSxJQUFJLENBQUMsQ0FBSSxFQUFFLENBQUk7UUFDbEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUM7UUFDdEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFFLENBQUM7UUFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztDQUNKO0FBMUVELHNDQTBFQyJ9","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./aStar\"));\r\n__export(require(\"./breadthFirstTraversal\"));\r\n__export(require(\"./depthFirstTraversal\"));\r\n__export(require(\"./floydWarshall\"));\r\n__export(require(\"./kruskalMST\"));\r\n__export(require(\"./stableMarriage\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ3JhcGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBd0I7QUFDeEIsNkNBQXdDO0FBRXhDLDJDQUFzQztBQUN0QyxxQ0FBZ0M7QUFDaEMsa0NBQTZCO0FBQzdCLHNDQUFpQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst unionfind_1 = require(\"../set/unionfind\");\r\n/**\r\n * Minimum spanning tree, Kruskal's algorithm\r\n * @param vertices vertices\r\n * @param neighbours neighbours that forms an edge with a given vertex\r\n * @param weight the weight of each edge\r\n */\r\nfunction kruskalMST(vertices, neighbours, weight) {\r\n    /*\r\n    https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\r\n    KRUSKAL(G):\r\n    1 A = ∅\r\n    2 foreach v ∈ G.V:\r\n    3    MAKE-SET(v)\r\n    4 foreach (u, v) in G.E ordered by weight(u, v), increasing:\r\n    5    if FIND-SET(u) ≠ FIND-SET(v):\r\n    6       A = A ∪ {(u, v)}\r\n    7       UNION(u, v)\r\n    8 return A\r\n    */\r\n    const sets = new unionfind_1.UnionFind();\r\n    const edges = Array\r\n        .from(vertices)\r\n        .reduce((acc, u) => {\r\n        for (const v of neighbours(u)) {\r\n            acc.push([u, v]);\r\n        }\r\n        return acc;\r\n    }, new Array())\r\n        .sort(([u1, v1], [u2, v2]) => weight(u1, v1) - weight(u2, v2)); // sort by weight on ascending order\r\n    const ret = new Map(Array\r\n        .from(vertices)\r\n        .map((v) => [v, []]));\r\n    for (const [u, v] of edges) {\r\n        if (!sets.isSameSet(u, v)) {\r\n            ret.get(u).push(v);\r\n            ret.get(v).push(u);\r\n            sets.union(u, v);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.kruskalMST = kruskalMST;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3J1c2thbE1TVC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaC9rcnVza2FsTVNULnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0RBQTZDO0FBRzdDOzs7OztHQUtHO0FBQ0gsU0FBZ0IsVUFBVSxDQUN0QixRQUFnQixFQUNoQixVQUFzQyxFQUN0QyxNQUE4QjtJQUU5Qjs7Ozs7Ozs7Ozs7TUFXRTtJQUVGLE1BQU0sSUFBSSxHQUFHLElBQUkscUJBQVMsRUFBSyxDQUFDO0lBQ2hDLE1BQU0sS0FBSyxHQUFHLEtBQUs7U0FDZCxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2QsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDM0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDLEVBQUUsSUFBSSxLQUFLLEVBQVUsQ0FBQztTQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQ0FBb0M7SUFFeEcsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSztTQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEMsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDdkIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDcEI7S0FDSjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQTFDRCxnQ0EwQ0MifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst minheap_1 = require(\"../array/minheap\");\r\nfunction setupCandidates(men, women) {\r\n    const candidates = new Map();\r\n    for (const [man, pref] of men) {\r\n        const heap = minheap_1.MinHeap.inPlaceWrap((a, b) => pref(b) - pref(a), Array\r\n            .from(women.keys())\r\n            .filter((x) => pref(x) !== undefined));\r\n        candidates.set(man, heap);\r\n    }\r\n    return candidates;\r\n}\r\n/**\r\n * Gale-Shapley Stable Marriage algorithm. Preference is a number ranking from highest to\r\n * lowest (say a=3.432, b=1, a has higher preference) or no preference (undefined).\r\n * Please make sure the preference function is pure (no side-effects), and ideally its\r\n * results are memoized by the caller.\r\n * @param men a map of all men and their preference (in a closure)\r\n * @param women a map of all women and their preference (in a closure)\r\n * @returns all matched couples, mapping women to men\r\n */\r\nfunction stableMarriage(men, women) {\r\n    const candidates = setupCandidates(men, women);\r\n    const engaged = new Map();\r\n    const freeMen = Array.from(men.keys());\r\n    while (freeMen.length > 0) {\r\n        const man = freeMen.pop();\r\n        const priority = candidates.get(man);\r\n        while (!priority.isEmpty) {\r\n            const topWoman = priority.pop();\r\n            const womanPref = women.get(topWoman);\r\n            const aPref = womanPref(man);\r\n            if (aPref === undefined) {\r\n                // woman doesn't even consider man as a candidate\r\n                continue;\r\n            }\r\n            // man is a valid candidate\r\n            const prevMan = engaged.get(topWoman);\r\n            // woman is free\r\n            if (prevMan === undefined) {\r\n                engaged.set(topWoman, man);\r\n                break;\r\n            }\r\n            // woman is engaged\r\n            const bPref = womanPref(prevMan); // to be engaged, woman must have a preference on prevMen\r\n            if (aPref > bPref) {\r\n                // current man replaces the previous one\r\n                engaged.set(topWoman, man);\r\n                freeMen.push(prevMan);\r\n                break;\r\n            }\r\n            // woman rejects the man\r\n        }\r\n    }\r\n    return engaged;\r\n}\r\nexports.stableMarriage = stableMarriage;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhYmxlTWFycmlhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ3JhcGgvc3RhYmxlTWFycmlhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBMkM7QUFHM0MsU0FBUyxlQUFlLENBQ3BCLEdBQTRELEVBQzVELEtBQTREO0lBRTVELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUF1QixDQUFDO0lBQ2xELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFFM0IsTUFBTSxJQUFJLEdBQUcsaUJBQU8sQ0FBQyxXQUFXLENBQzVCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUUsRUFDN0IsS0FBSzthQUNBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDbEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQzVDLENBQUM7UUFDRixVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM3QjtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLGNBQWMsQ0FDMUIsR0FBNEQsRUFDNUQsS0FBNEQ7SUFHNUQsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQyxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBYyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFdkMsT0FBTyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFHLENBQUM7UUFDM0IsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FBQztRQUN0QyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUN0QixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFHLENBQUM7WUFDakMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUUsQ0FBQztZQUN2QyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFN0IsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUNyQixpREFBaUQ7Z0JBQ2pELFNBQVM7YUFDWjtZQUNELDJCQUEyQjtZQUUzQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXRDLGdCQUFnQjtZQUNoQixJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixNQUFNO2FBQ1Q7WUFFRCxtQkFBbUI7WUFDbkIsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMseURBQXlEO1lBRTVGLElBQUksS0FBSyxHQUFHLEtBQUssRUFBRTtnQkFDZix3Q0FBd0M7Z0JBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QixNQUFNO2FBQ1Q7WUFFRCx3QkFBd0I7U0FDM0I7S0FDSjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUE5Q0Qsd0NBOENDIn0=","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./array\"));\r\n__export(require(\"./boundary\"));\r\n__export(require(\"./comparison\"));\r\n__export(require(\"./graph\"));\r\n__export(require(\"./iter\"));\r\n__export(require(\"./map\"));\r\n__export(require(\"./math2D\"));\r\n__export(require(\"./memo\"));\r\n__export(require(\"./mut\"));\r\n__export(require(\"./numbers\"));\r\n__export(require(\"./rand\"));\r\n__export(require(\"./set\"));\r\n__export(require(\"./tuple\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2QkFBd0I7QUFDeEIsZ0NBQTJCO0FBQzNCLGtDQUE2QjtBQUM3Qiw2QkFBd0I7QUFDeEIsNEJBQXVCO0FBQ3ZCLDJCQUFzQjtBQUN0Qiw4QkFBeUI7QUFDekIsNEJBQXVCO0FBQ3ZCLDJCQUFzQjtBQUN0QiwrQkFBMEI7QUFDMUIsNEJBQXVCO0FBQ3ZCLDJCQUFzQjtBQUN0Qiw2QkFBd0IifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"./wrapper\");\r\n/**\r\n * Combine a list of iterators together, treating like a single one.\r\n * @param its a list of iterables\r\n */\r\nfunction combine(...its) {\r\n    return wrapper_1.wrapIt(combineHelper(its));\r\n}\r\nexports.combine = combine;\r\nfunction* combineHelper(its) {\r\n    for (const it of its) {\r\n        for (const item of it) {\r\n            yield item;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pdGVyL2NvbWJpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBbUM7QUFFbkM7OztHQUdHO0FBQ0gsU0FBZ0IsT0FBTyxDQUFJLEdBQUcsR0FBdUI7SUFDakQsT0FBTyxnQkFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCwwQkFFQztBQUVELFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBSSxHQUF1QjtJQUM5QyxLQUFLLE1BQU0sRUFBRSxJQUFJLEdBQUcsRUFBRTtRQUNsQixLQUFLLE1BQU0sSUFBSSxJQUFJLEVBQUUsRUFBRTtZQUNuQixNQUFNLElBQUksQ0FBQztTQUNkO0tBQ0o7QUFDTCxDQUFDIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"./wrapper\");\r\n/**\r\n * Generate a sequence based on generator, infinite is left out count.\r\n * @param generator generator that creates values for the sequence\r\n * @param count number of items to generate\r\n */\r\nfunction genBy(generator) {\r\n    function* genByHelper() {\r\n        for (let i = 0; true; ++i) {\r\n            yield generator(i);\r\n        }\r\n    }\r\n    return wrapper_1.wrapIt(genByHelper());\r\n}\r\nexports.genBy = genBy;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuQnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaXRlci9nZW5CeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFtQztBQUVuQzs7OztHQUlHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFJLFNBQTJCO0lBQ2hELFFBQVEsQ0FBQyxDQUFDLFdBQVc7UUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUNELE9BQU8sZ0JBQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFQRCxzQkFPQyJ9","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./combine\"));\r\n__export(require(\"./genBy\"));\r\n__export(require(\"./repeat\"));\r\n__export(require(\"./wrapper\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaXRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLCtCQUEwQjtBQUUxQiw2QkFBd0I7QUFDeEIsOEJBQXlCO0FBQ3pCLCtCQUEwQiJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"./wrapper\");\r\n/** Repeat the given value indefinitely. */\r\nfunction repeat(t) {\r\n    return wrapper_1.wrapIt(repeatHelper(t));\r\n}\r\nexports.repeat = repeat;\r\nfunction* repeatHelper(t) {\r\n    while (true) {\r\n        yield t;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2l0ZXIvcmVwZWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQW1DO0FBRW5DLDJDQUEyQztBQUMzQyxTQUFnQixNQUFNLENBQUksQ0FBSTtJQUMxQixPQUFPLGdCQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUZELHdCQUVDO0FBRUQsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFJLENBQUk7SUFDMUIsT0FBTyxJQUFJLEVBQUU7UUFDVCxNQUFNLENBQUMsQ0FBQztLQUNYO0FBQ0wsQ0FBQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction* map(it, mapper) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        yield mapper(t, i);\r\n        ++i;\r\n    }\r\n}\r\nfunction* flatMap(it, mapper) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        for (const u of mapper(t, i)) {\r\n            yield u;\r\n        }\r\n        ++i;\r\n    }\r\n}\r\nfunction reduce(it, reducer, base) {\r\n    let acc = base;\r\n    let i = 0;\r\n    for (const t of it) {\r\n        acc = reducer(acc, t, i);\r\n        ++i;\r\n    }\r\n    return acc;\r\n}\r\nfunction* take(it, count) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        if (i >= count) {\r\n            break;\r\n        }\r\n        yield t;\r\n        ++i;\r\n    }\r\n}\r\nfunction every(it, pred) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        if (!pred(t, i)) {\r\n            return false;\r\n        }\r\n        ++i;\r\n    }\r\n    return true;\r\n}\r\nfunction some(it, pred) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        if (pred(t, i)) {\r\n            return true;\r\n        }\r\n        ++i;\r\n    }\r\n    return false;\r\n}\r\nfunction forEach(it, callBackFn) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        if (callBackFn(t, i) === false) {\r\n            return;\r\n        }\r\n        ++i;\r\n    }\r\n}\r\nfunction* filter(it, pred) {\r\n    let i = 0;\r\n    for (const t of it) {\r\n        if (pred(t, i)) {\r\n            yield t;\r\n        }\r\n        ++i;\r\n    }\r\n}\r\nfunction* pin(it, hammer) {\r\n    let isFirst = true;\r\n    let prev;\r\n    for (const cur of it) {\r\n        if (isFirst) {\r\n            isFirst = false;\r\n            prev = cur;\r\n        }\r\n        else {\r\n            yield hammer(prev, cur);\r\n            prev = cur;\r\n        }\r\n    }\r\n}\r\nfunction countHelper(it) {\r\n    let i = 0;\r\n    for (const _ of it) {\r\n        ++i;\r\n    }\r\n    return i;\r\n}\r\nfunction first(it) {\r\n    return wrapIt(it).take(1).collect()[0];\r\n}\r\n/**\r\n * Wraps an iterator with extra functionality.\r\n * @param it an iterator\r\n */\r\nfunction wrapIt(it) {\r\n    return {\r\n        collect: () => Array.from(it),\r\n        count: () => countHelper(it),\r\n        every: (pred) => every(it, pred),\r\n        filter: (pred) => wrapIt(filter(it, pred)),\r\n        first: () => first(it),\r\n        flatMap: (mapper) => wrapIt(flatMap(it, mapper)),\r\n        forEach: (callBackFn) => forEach(it, callBackFn),\r\n        map: (mapper) => wrapIt(map(it, mapper)),\r\n        pin: (hammer) => wrapIt(pin(it, hammer)),\r\n        reduce: (reducer, base) => reduce(it, reducer, base),\r\n        some: (pred) => some(it, pred),\r\n        take: (count) => wrapIt(take(it, count)),\r\n        *[Symbol.iterator]() {\r\n            for (const t of it) {\r\n                yield t;\r\n            }\r\n        },\r\n    };\r\n}\r\nexports.wrapIt = wrapIt;\r\n/**\r\n * An abstract base class for all data structure from this library.\r\n */\r\nclass MyIterable {\r\n    constructor() {\r\n        this.collect = () => Array.from(this);\r\n        this.count = () => countHelper(this);\r\n        this.first = () => first(this);\r\n        this.flatMap = (mapper) => wrapIt(flatMap(this, mapper));\r\n        this.map = (mapper) => wrapIt(map(this, mapper));\r\n        this.pin = (hammer) => wrapIt(pin(this, hammer));\r\n        this.reduce = (reducer, base) => reduce(this, reducer, base);\r\n        this.some = (pred) => some(this, pred);\r\n        this.every = (pred) => every(this, pred);\r\n        this.filter = (pred) => wrapIt(filter(this, pred));\r\n        this.forEach = (callBackFn) => forEach(this, callBackFn);\r\n        this.take = (count) => wrapIt(take(this, count));\r\n    }\r\n    *[Symbol.iterator]() {\r\n        for (const t of this.iterate()) {\r\n            yield t;\r\n        }\r\n    }\r\n    get isEmpty() { return this.size === 0; }\r\n}\r\nexports.MyIterable = MyIterable;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pdGVyL3dyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQU8sRUFBZSxFQUFFLE1BQThCO0lBQy9ELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2hCLE1BQU0sTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuQixFQUFFLENBQUMsQ0FBQztLQUNQO0FBQ0wsQ0FBQztBQUVELFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBTyxFQUFlLEVBQUUsTUFBd0M7SUFDN0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDaEIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxDQUFDO1NBQ1g7UUFDRCxFQUFFLENBQUMsQ0FBQztLQUNQO0FBQ0wsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFPLEVBQWUsRUFBRSxPQUF1QyxFQUFFLElBQU87SUFDbkYsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDaEIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDO0tBQ1A7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFFRCxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUksRUFBZSxFQUFFLEtBQWE7SUFDNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsS0FBSyxNQUFNLENBQUMsSUFB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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Bi-direction map, based on two Map objects. Use this class for data that has a bijective relationship.\r\n */\r\nclass BiMap extends wrapper_1.MyIterable {\r\n    constructor(...data) {\r\n        super();\r\n        this.iterate = () => {\r\n            return this.leftMap.entries();\r\n        };\r\n        this.leftMap = new Map(data);\r\n        this.rightMap = new Map(data.map(([t, u]) => [u, t]));\r\n    }\r\n    get size() {\r\n        console.assert(this.leftMap.size === this.rightMap.size);\r\n        return this.leftMap.size;\r\n    }\r\n    set(left, right) {\r\n        this.leftMap.set(left, right);\r\n        this.rightMap.set(right, left);\r\n        return this;\r\n    }\r\n    delete(left) {\r\n        const right = this.leftMap.get(left);\r\n        return right !== undefined && this._delete(left, right);\r\n    }\r\n    deleteRight(right) {\r\n        const left = this.rightMap.get(right);\r\n        return left !== undefined && this._delete(left, right);\r\n    }\r\n    get(left) {\r\n        return this.leftMap.get(left);\r\n    }\r\n    getLeft(right) {\r\n        return this.rightMap.get(right);\r\n    }\r\n    has(left) {\r\n        return this.leftMap.has(left);\r\n    }\r\n    hasRight(right) {\r\n        return this.rightMap.has(right);\r\n    }\r\n    keys() {\r\n        return this.leftMap.keys();\r\n    }\r\n    values() {\r\n        return this.leftMap.values();\r\n    }\r\n    _delete(left, right) {\r\n        const ret1 = this.leftMap.delete(left);\r\n        const ret2 = this.rightMap.delete(right);\r\n        console.assert(ret1);\r\n        console.assert(ret2);\r\n        return true;\r\n    }\r\n}\r\nexports.BiMap = BiMap;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmltYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwL2JpbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQTZDO0FBRzdDOztHQUVHO0FBQ0gsTUFBYSxLQUNULFNBQVEsb0JBQWtCO0lBTTFCLFlBQVksR0FBRyxJQUFtQjtRQUM5QixLQUFLLEVBQUUsQ0FBQztRQWtERixZQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNsQyxDQUFDLENBQUE7UUFuREcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDWCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRU0sR0FBRyxDQUFDLElBQU8sRUFBRSxLQUFRO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFPO1FBQ2pCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU0sV0FBVyxDQUFDLEtBQVE7UUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTSxHQUFHLENBQUMsSUFBTztRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUFRO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxJQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQVE7UUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sSUFBSTtRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBTU8sT0FBTyxDQUFDLElBQU8sRUFBRSxLQUFRO1FBQzdCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0o7QUFyRUQsc0JBcUVDIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst trie_1 = require(\"./trie\");\r\nclass Dictionary {\r\n    constructor() {\r\n        this.dict = new trie_1.Trie();\r\n    }\r\n    set(s, key, val) {\r\n        const fixed = fixString(s);\r\n        for (const s2 of enumerateSubstr(fixed)) {\r\n            this.dict\r\n                .getOrSet(Array.from(s2), () => new Map())\r\n                .set(key, val);\r\n        }\r\n        return this;\r\n    }\r\n    batchSet(s, results) {\r\n        const fixed = fixString(s);\r\n        for (const s2 of enumerateSubstr(fixed)) {\r\n            const oldResults = this.dict\r\n                .getOrSet(Array.from(s2), () => new Map());\r\n            for (const [k, v] of results) {\r\n                oldResults.set(k, v);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    search(s) {\r\n        const fixed = fixString(s);\r\n        const ret = this.dict.get(Array.from(fixed)) || new Map();\r\n        return ret.entries();\r\n    }\r\n    delete(s, key) {\r\n        const fixed = fixString(s);\r\n        let ret = false;\r\n        for (const s2 of enumerateSubstr(fixed)) {\r\n            const search = this.dict.get(Array.from(s2));\r\n            if (search !== undefined) {\r\n                const check = search.delete(key);\r\n                console.assert(ret && check); // otherwise inconsistent structure\r\n                ret = true;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nexports.Dictionary = Dictionary;\r\nfunction fixString(s) {\r\n    return s\r\n        .replace(/\\s/g, \"\")\r\n        .toLowerCase();\r\n}\r\nfunction* enumerateSubstr(s) {\r\n    const n = s.length;\r\n    for (let i = 0; i < n; i++) {\r\n        for (let len = 1; len <= n - i; len++) {\r\n            yield s.substr(i, len);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdGlvbmFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvZGljdGlvbmFyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUE4QjtBQUU5QixNQUFhLFVBQVU7SUFBdkI7UUFDWSxTQUFJLEdBQUcsSUFBSSxXQUFJLEVBQXVCLENBQUM7SUEyQ25ELENBQUM7SUF6Q1UsR0FBRyxDQUFDLENBQVMsRUFBRSxHQUFNLEVBQUUsR0FBTTtRQUNoQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsS0FBSyxNQUFNLEVBQUUsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLElBQUk7aUJBQ0osUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztpQkFDekMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN0QjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxRQUFRLENBQUMsQ0FBUyxFQUFFLE9BQWtCO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixLQUFLLE1BQU0sRUFBRSxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSTtpQkFDdkIsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxPQUFPLEVBQUU7Z0JBQzFCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sTUFBTSxDQUFDLENBQVM7UUFDbkIsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzFELE9BQU8sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxNQUFNLENBQUMsQ0FBUyxFQUFFLEdBQU07UUFDM0IsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQztRQUNoQixLQUFLLE1BQU0sRUFBRSxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDN0MsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN0QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLG1DQUFtQztnQkFDakUsR0FBRyxHQUFHLElBQUksQ0FBQzthQUNkO1NBQ0o7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Q0FDSjtBQTVDRCxnQ0E0Q0M7QUFFRCxTQUFTLFNBQVMsQ0FBQyxDQUFTO0lBQ3hCLE9BQU8sQ0FBQztTQUNILE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1NBQ2xCLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxRQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBUztJQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDeEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMxQjtLQUNKO0FBQ0wsQ0FBQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction groupBy(it, keyFn) {\r\n    const ret = new Map();\r\n    for (const t of it) {\r\n        const key = keyFn(t);\r\n        let arr = ret.get(key);\r\n        if (arr === undefined) {\r\n            arr = [];\r\n            ret.set(key, arr);\r\n        }\r\n        arr.push(t);\r\n    }\r\n    return ret;\r\n}\r\nexports.groupBy = groupBy;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBCeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvZ3JvdXBCeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLFNBQWdCLE9BQU8sQ0FBTyxFQUFlLEVBQUUsS0FBa0I7SUFDN0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUM5QixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNoQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDbkIsR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUNULEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNmO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBWkQsMEJBWUMifQ==","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./bimap\"));\r\n__export(require(\"./dictionary\"));\r\n__export(require(\"./groupBy\"));\r\n__export(require(\"./join\"));\r\n__export(require(\"./sortedTrie\"));\r\n__export(require(\"./trie\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkJBQXdCO0FBRXhCLGtDQUE2QjtBQUM3QiwrQkFBMEI7QUFDMUIsNEJBQXVCO0FBQ3ZCLGtDQUE2QjtBQUM3Qiw0QkFBdUIifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst combine_1 = require(\"../iter/combine\");\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\nconst intersect_1 = require(\"../set/intersect\");\r\nconst tuple_1 = require(\"../tuple\");\r\nfunction combineByKeys(keys, maps, combinator) {\r\n    return new Map(wrapper_1.wrapIt(keys)\r\n        .map((key) => {\r\n        const v = combinator(...wrapper_1.wrapIt(maps)\r\n            .map((map) => map.get(key))\r\n            .filter((val) => val !== undefined));\r\n        return tuple_1.makePair(key, v);\r\n    }));\r\n}\r\n/**\r\n * Think of this as the full outer join in SQL.\r\n */\r\nfunction outerJoin(combinator, ...maps) {\r\n    const keys = new Set(combine_1.combine(...maps.map((map) => map.keys())));\r\n    return combineByKeys(keys, maps, combinator);\r\n}\r\nexports.outerJoin = outerJoin;\r\n/** Think of this as SQL's left join. */\r\nfunction leftJoin(combinator, leftMap, ...rightMaps) {\r\n    const keys = leftMap.keys();\r\n    return combineByKeys(keys, [leftMap, ...rightMaps], combinator);\r\n}\r\nexports.leftJoin = leftJoin;\r\n/** Think of this as SQL's inner join. */\r\nfunction innerJoin(combinator, ...maps) {\r\n    const keys = intersect_1.intersect(...maps.map((map) => new Set(map.keys())));\r\n    return combineByKeys(keys, maps, combinator);\r\n}\r\nexports.innerJoin = innerJoin;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvam9pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEwQztBQUMxQyw2Q0FBeUM7QUFDekMsZ0RBQTZDO0FBQzdDLG9DQUFvQztBQUdwQyxTQUFTLGFBQWEsQ0FDbEIsSUFBaUIsRUFDakIsSUFBa0MsRUFDbEMsVUFBNkI7SUFFN0IsT0FBTyxJQUFJLEdBQUcsQ0FBQyxnQkFBTSxDQUFDLElBQUksQ0FBQztTQUN0QixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNULE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLGdCQUFNLENBQUMsSUFBSSxDQUFDO2FBQy9CLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FBQzthQUMzQixNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sZ0JBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNaLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFNBQVMsQ0FDckIsVUFBNkIsRUFDN0IsR0FBRyxJQUErQjtJQUVsQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLE9BQU8sYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQU5ELDhCQU1DO0FBRUQsd0NBQXdDO0FBQ3hDLFNBQWdCLFFBQVEsQ0FDcEIsVUFBNkIsRUFDN0IsT0FBMkIsRUFDM0IsR0FBRyxTQUFvQztJQUV2QyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsT0FBTyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQVBELDRCQU9DO0FBRUQseUNBQXlDO0FBQ3pDLFNBQWdCLFNBQVMsQ0FDckIsVUFBNkIsRUFDN0IsR0FBRyxJQUErQjtJQUVsQyxNQUFNLElBQUksR0FBRyxxQkFBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLE9BQU8sYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQU5ELDhCQU1DIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cmpList_1 = require(\"../comparison/cmpList\");\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\nconst trie_1 = require(\"./trie\");\r\n/**\r\n * A variant of Trie, where keys are list of 1 type and sorted by a comparator.\r\n * A use case is if you have an adjacency list of undirected graphs\r\n * and you want to store their edges (say, u->v and v->u) without duplicates.\r\n */\r\nclass SortedTrie extends wrapper_1.MyIterable {\r\n    constructor(cmp, ...list) {\r\n        super();\r\n        this.cmp = cmp;\r\n        this.get = (key) => {\r\n            return this.data.get(SortedTrie.sortKey(this.cmp, key));\r\n        };\r\n        this.has = (key) => this.data.has(SortedTrie.sortKey(this.cmp, key));\r\n        this.delete = (key) => {\r\n            return this.data.delete(SortedTrie.sortKey(this.cmp, key));\r\n        };\r\n        this.set = (key, val) => {\r\n            return this.data.set(SortedTrie.sortKey(this.cmp, key), val);\r\n        };\r\n        this.getOrSet = (key, setter) => {\r\n            return this.data.getOrSet(SortedTrie.sortKey(this.cmp, key), setter);\r\n        };\r\n        this.keys = () => {\r\n            return wrapper_1.wrapIt(this.iterate())\r\n                .map(([key]) => key);\r\n        };\r\n        this.values = () => {\r\n            return wrapper_1.wrapIt(this.iterate())\r\n                .map(([, val]) => val);\r\n        };\r\n        /** Create a new sorted trie with the same comparator as this instance (use this when you usually want clear()). */\r\n        this.makeEmpty = () => {\r\n            return new SortedTrie(this.cmp);\r\n        };\r\n        this.iterate = () => {\r\n            return SortedTrie.iterateHelper(this.cmp, this.data);\r\n        };\r\n        this.data = new trie_1.Trie(...list.map(([key, val]) => [\r\n            SortedTrie.sortKey(cmp, key),\r\n            val,\r\n        ]));\r\n    }\r\n    static *iterateHelper(cmp, data) {\r\n        const sorted = Array.from(data).sort(([a], [b]) => cmpList_1.cmpList(cmp, a, b));\r\n        for (const item of sorted) {\r\n            yield item;\r\n        }\r\n    }\r\n    get size() { return this.data.size; }\r\n    get isEmpty() { return this.size === 0; }\r\n}\r\nSortedTrie.sortKey = (cmp, key) => {\r\n    return key.slice().sort(cmp);\r\n};\r\nexports.SortedTrie = SortedTrie;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVkVHJpZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvc29ydGVkVHJpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFnRDtBQUNoRCw2Q0FBcUQ7QUFDckQsaUNBQThCO0FBRTlCOzs7O0dBSUc7QUFDSCxNQUFhLFVBQWlDLFNBQVEsb0JBQW1CO0lBaUJyRSxZQUNZLEdBQTJCLEVBQ25DLEdBQUcsSUFBb0I7UUFDdkIsS0FBSyxFQUFFLENBQUM7UUFGQSxRQUFHLEdBQUgsR0FBRyxDQUF3QjtRQWFoQyxRQUFHLEdBQUcsQ0FBQyxHQUFPLEVBQUUsRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQTtRQUVNLFFBQUcsR0FBRyxDQUFDLEdBQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFcEUsV0FBTSxHQUFHLENBQUMsR0FBTyxFQUFFLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUE7UUFFTSxRQUFHLEdBQUcsQ0FBQyxHQUFPLEVBQUUsR0FBTSxFQUFFLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFBO1FBRU0sYUFBUSxHQUFHLENBQUMsR0FBTyxFQUFFLE1BQWUsRUFBRSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQTtRQUVNLFNBQUksR0FBRyxHQUFHLEVBQUU7WUFDZixPQUFPLGdCQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUE7UUFFTSxXQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2pCLE9BQU8sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7aUJBQ3hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFBO1FBRUQsbUhBQW1IO1FBQzVHLGNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDcEIsT0FBTyxJQUFJLFVBQVUsQ0FBVyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFBO1FBRVMsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNyQixPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFBO1FBN0NHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQVcsRUFBRSxDQUFDO1lBQ3RELFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztZQUM1QixHQUFHO1NBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDO0lBakJPLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBdUIsR0FBMkIsRUFBRSxJQUFpQjtRQUM5RixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLEVBQUU7WUFDdkIsTUFBTSxJQUFJLENBQUM7U0FDZDtJQUNMLENBQUM7SUFjRCxJQUFXLElBQUksS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU1QyxJQUFXLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUEzQmpDLGtCQUFPLEdBQUcsQ0FDckIsR0FBMkIsRUFDM0IsR0FBTyxFQUFNLEVBQUU7SUFDZixPQUFPLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFPLENBQUM7QUFDdkMsQ0FBQyxDQUFBO0FBTkwsZ0NBbUVDIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst depthFirstTraversal_1 = require(\"../graph/depthFirstTraversal\");\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\nconst tuple_1 = require(\"../tuple\");\r\nfunction* entries(root) {\r\n    /*\r\n     * A big chunk of this method deals with key reconstruction.\r\n     * Remember, the keys are stored as \"characters\" on each node.\r\n     * With pre-order depth-first traversal, a node (say, A)\r\n     * - would report itself first\r\n     * - then A's first children\r\n     * - then A's first children's descendents\r\n     * - finally A's other children\r\n     * In other words, the prefix of a key share common ancestors with their children,\r\n     * and we can just pop off suffixes back to the key of A and use it for A's children.\r\n     */\r\n    const allNodes = depthFirstTraversal_1.dfsPreOrder(root, (me) => me.next.values());\r\n    const key = [];\r\n    let curDepth = 0;\r\n    for (const [node, depth] of allNodes) {\r\n        // recover the parent's key\r\n        const depthDiff = curDepth - depth;\r\n        for (let i = 0; i < depthDiff; ++i) {\r\n            key.pop();\r\n            curDepth--;\r\n        }\r\n        if (node.keyChar !== undefined) {\r\n            key.push(node.keyChar);\r\n        }\r\n        else {\r\n            // the root node (empty) is the only node that can have no character; otherwise DFS would\r\n            // stop traversing instead of reporting the \"leafs\" nodes\r\n            console.assert(depth === 0);\r\n        }\r\n        ++curDepth;\r\n        if (node.val !== undefined) {\r\n            yield tuple_1.makePair(key.slice(), node.val);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Trie data structure whose keys can either be a tuple or an array.\r\n */\r\nclass Trie extends wrapper_1.MyIterable {\r\n    constructor(...list) {\r\n        super();\r\n        this.root = { next: new Map() };\r\n        this.trieSize = 0;\r\n        this.get = (key) => {\r\n            const node = this.traverse(key);\r\n            return node === undefined ? undefined : node.val;\r\n        };\r\n        this.has = (key) => this.get(key) !== undefined;\r\n        this.delete = (key) => {\r\n            const ancestors = [];\r\n            const node = this.traverse(key, (kc, n) => ancestors.push([kc, n]));\r\n            if (node === undefined || node.val === undefined) {\r\n                return false;\r\n            }\r\n            --this.trieSize;\r\n            // clean up unused structure\r\n            let cur = node;\r\n            for (let i = ancestors.length - 1; i >= 0; i--) {\r\n                // current node is still in used by other keys\r\n                if (cur.next.size !== 0) {\r\n                    break;\r\n                }\r\n                // otherwise delete the current (unused) structure\r\n                const [kc, parent] = ancestors[i];\r\n                console.assert(parent.next.size > 0);\r\n                parent.next.delete(kc);\r\n                cur = parent;\r\n            }\r\n            return true;\r\n        };\r\n        this.set = (key, val) => {\r\n            let temp = this.root;\r\n            key.forEach((keyChar) => {\r\n                if (keyChar === undefined) {\r\n                    throw new Error(\"undefined not allowed as part of the key\");\r\n                }\r\n                let next = temp.next.get(keyChar);\r\n                if (next === undefined) {\r\n                    next = { next: new Map() };\r\n                    temp.next.set(keyChar, next);\r\n                    // fall-through\r\n                }\r\n                next.keyChar = keyChar;\r\n                temp = next;\r\n            });\r\n            temp.val = val;\r\n            ++this.trieSize;\r\n            return this;\r\n        };\r\n        this.getOrSet = (key, setter) => {\r\n            let cur = this.root;\r\n            if (key.some((c) => c === undefined)) {\r\n                throw new Error(\"undefined is not allowed to be part of the key\");\r\n            }\r\n            for (const curChar of key) {\r\n                let next = cur.next.get(curChar);\r\n                if (next === undefined) {\r\n                    next = { next: new Map() };\r\n                    cur.next.set(curChar, next);\r\n                    // fall-through\r\n                }\r\n                next.keyChar = curChar;\r\n                cur = next;\r\n            }\r\n            if (cur.val === undefined) {\r\n                cur.val = setter();\r\n                ++this.trieSize;\r\n            }\r\n            return cur.val;\r\n        };\r\n        this.keys = () => {\r\n            return wrapper_1.wrapIt(entries(this.root))\r\n                .map(([key]) => key);\r\n        };\r\n        this.values = () => {\r\n            return wrapper_1.wrapIt(entries(this.root))\r\n                .map(([, val]) => val);\r\n        };\r\n        /** Get the number of children for a given key (only useful when the key is an array). */\r\n        this.getFanout = (key) => {\r\n            const node = this.traverse(key);\r\n            if (node) {\r\n                return node.next.size;\r\n            }\r\n            return 0;\r\n        };\r\n        this.iterate = () => {\r\n            return entries(this.root);\r\n        };\r\n        this.traverse = (key, visit = () => { }) => {\r\n            let cur = this.root;\r\n            for (const keyChar of key) {\r\n                const temp = cur.next.get(keyChar);\r\n                if (temp === undefined) {\r\n                    return undefined;\r\n                }\r\n                visit(keyChar, cur);\r\n                cur = temp;\r\n            }\r\n            return cur;\r\n        };\r\n        for (const [k, v] of list) {\r\n            this.set(k, v);\r\n        }\r\n    }\r\n    /** Return the number of items the trie */\r\n    get size() { return this.trieSize; }\r\n    get isEmpty() { return this.size === 0; }\r\n}\r\nexports.Trie = Trie;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvdHJpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNFQUEyRDtBQUMzRCw2Q0FBcUQ7QUFDckQsb0NBQW9DO0FBU3BDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBcUIsSUFBcUI7SUFFdkQ7Ozs7Ozs7Ozs7T0FVRztJQUVILE1BQU0sUUFBUSxHQUFHLGlDQUFXLENBQ3hCLElBQUksRUFDSixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FDM0IsQ0FBQztJQUVGLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNmLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNqQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksUUFBUSxFQUFFO1FBRWxDLDJCQUEyQjtRQUMzQixNQUFNLFNBQVMsR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDaEMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1YsUUFBUSxFQUFFLENBQUM7U0FDZDtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDMUI7YUFBTTtZQUNILHlGQUF5RjtZQUN6Rix5REFBeUQ7WUFDekQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDL0I7UUFDRCxFQUFFLFFBQVEsQ0FBQztRQUVYLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDeEIsTUFBTSxnQkFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQU8sRUFBRSxJ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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction equal([ax, ay], [bx, by]) {\r\n    return ax === bx && ay === by;\r\n}\r\nexports.equal = equal;\r\nfunction compare([ax, ay], [bx, by]) {\r\n    if (ax < bx) {\r\n        return -1;\r\n    }\r\n    if (ax > bx) {\r\n        return 1;\r\n    }\r\n    return ay - by;\r\n}\r\nexports.compare = compare;\r\nfunction subtract([ax, ay], [bx, by]) {\r\n    return [ax - bx, ay - by];\r\n}\r\nexports.subtract = subtract;\r\nfunction add([ax, ay], [bx, by]) {\r\n    return [ax + bx, ay + by];\r\n}\r\nexports.add = add;\r\nfunction norm([ax, ay]) {\r\n    return Math.sqrt(ax * ax + ay * ay);\r\n}\r\nexports.norm = norm;\r\nfunction distance(a, b) {\r\n    return norm(subtract(a, b));\r\n}\r\nexports.distance = distance;\r\nfunction scalarMult([ax, ay], scalar) {\r\n    return [scalar * ax, scalar * ay];\r\n}\r\nexports.scalarMult = scalarMult;\r\nfunction manhattanDistance(a, b) {\r\n    const [cx, cy] = subtract(a, b);\r\n    return Math.abs(cx) + Math.abs(cy);\r\n}\r\nexports.manhattanDistance = manhattanDistance;\r\n/** Calculate the projection of a vector by a scalar. */\r\nfunction project(a, scalar = 1) {\r\n    const n = norm(a);\r\n    console.assert(n !== 0, \"caller make sure the given vector is not the origin\");\r\n    return scalarMult(a, scalar / n);\r\n}\r\nexports.project = project;\r\n/** Calculate the determinant of a 2D matric. */\r\nfunction determinant([ax, ay], [bx, by]) {\r\n    return ax * by - bx * ay;\r\n}\r\nexports.determinant = determinant;\r\nfunction dot([ax, ay], [bx, by]) {\r\n    return ax * bx + ay + by;\r\n}\r\nexports.dot = dot;\r\n/** Test whether a point P is in the rectangle defined by points A and B. */\r\nfunction isPointInRect([px, py], [ax, ay], [bx, by]) {\r\n    const maxX = Math.max(ax, bx);\r\n    const minX = Math.min(ax, bx);\r\n    const maxY = Math.max(ay, by);\r\n    const minY = Math.min(ay, by);\r\n    return px <= maxX && px >= minX && py <= maxY && py >= minY;\r\n}\r\nexports.isPointInRect = isPointInRect;\r\n// turn this to const enum after this is fixed: https://github.com/Microsoft/TypeScript/issues/16671\r\nvar IntersectionKind;\r\n(function (IntersectionKind) {\r\n    IntersectionKind[IntersectionKind[\"None\"] = 0] = \"None\";\r\n    IntersectionKind[IntersectionKind[\"Tangent\"] = 1] = \"Tangent\";\r\n    IntersectionKind[IntersectionKind[\"Intersection\"] = 2] = \"Intersection\";\r\n})(IntersectionKind = exports.IntersectionKind || (exports.IntersectionKind = {}));\r\n/**\r\n * Test whether a given infinite line, defined by a & b, intersects a circle.\r\n * @param a a point in the line segment\r\n * @param b another point in the line segment\r\n * @param c the center of the target circle\r\n * @param r the target circle's radius\r\n * @see https://math.stackexchange.com/a/2035466\r\n * @see http://mathworld.wolfram.com/Circle-LineIntersection.html\r\n */\r\nfunction testLineCircleIntersect(a, b, c, r) {\r\n    // translate a and b by c, to simplify the problem to testing a line to a circle centered around the origin\r\n    const ta = subtract(a, c);\r\n    const tb = subtract(b, c);\r\n    const dr = distance(a, b);\r\n    const dr2 = dr * dr;\r\n    const r2 = r * r;\r\n    const det = determinant(ta, tb);\r\n    const det2 = det * det;\r\n    const discriminant = r2 * dr2 - det2;\r\n    if (discriminant < 0) {\r\n        return IntersectionKind.None;\r\n    }\r\n    else if (discriminant > 0) {\r\n        return IntersectionKind.Intersection;\r\n    }\r\n    else {\r\n        return IntersectionKind.Tangent;\r\n    }\r\n}\r\nexports.testLineCircleIntersect = testLineCircleIntersect;\r\n/**\r\n * Test whether a given finite line segment, defined by a & b, intersects a circle.\r\n * @param a a point in the line segment\r\n * @param b another point in the line segment\r\n * @param c the center of the target circle\r\n * @param r the target circle's radius\r\n */\r\nfunction testLineSegmentCircleIntersect(a, b, c, r) {\r\n    // for finite line segments, test whether the center is within the rectangle defined by a,b\r\n    if (!isPointInRect(c, a, b)) {\r\n        return IntersectionKind.None;\r\n    }\r\n    return testLineCircleIntersect(a, b, c, r);\r\n}\r\nexports.testLineSegmentCircleIntersect = testLineSegmentCircleIntersect;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aDJELmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hdGgyRC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLFNBQWdCLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQVE7SUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDbEMsQ0FBQztBQUZELHNCQUVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUTtJQUNwRCxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQUU7SUFDM0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQUUsT0FBTyxDQUFDLENBQUM7S0FBRTtJQUMxQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDbkIsQ0FBQztBQUpELDBCQUlDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUTtJQUNyRCxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBZ0IsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUTtJQUNoRCxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUZELGtCQUVDO0FBRUQsU0FBZ0IsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBUTtJQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxH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","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Memoization\r\n * @param genVal generator whose values will be memoized\r\n */\r\nfunction memo(genVal) {\r\n    const memory = new Map();\r\n    return (target) => {\r\n        if (!memory.has(target)) {\r\n            const val = genVal(target);\r\n            memory.set(target, val);\r\n            // fall-through\r\n        }\r\n        return memory.get(target);\r\n    };\r\n}\r\nexports.memo = memo;\r\n/**\r\n * Similar to memo(), expect the target would generate a range of values through genRange,\r\n * based on keys derived from keyBy.\r\n * @param genRange generate a range of values to be memoized, the values for\r\n *  one key must be disjoint from those of other keys\r\n * @param keyBy derive keys for genRange()\r\n */\r\nfunction memoBy(genRange, keyBy) {\r\n    const memory = new Map();\r\n    return (target) => {\r\n        if (!memory.has(target)) {\r\n            const key = keyBy(target);\r\n            for (const [s, u] of genRange(key)) {\r\n                if (memory.has(s)) {\r\n                    throw new Error(\"genRange keys overlap (all keys from keyBy must be mapped to disjoint sets\");\r\n                }\r\n                memory.set(s, u);\r\n            }\r\n            if (!memory.has(target)) {\r\n                throw new Error(\"genRange doesn't cover the target\");\r\n            }\r\n            // fall-through\r\n        }\r\n        return memory.get(target);\r\n    };\r\n}\r\nexports.memoBy = memoBy;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tZW1vLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUE7OztHQUdHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFPLE1BQXFCO0lBQzVDLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFRLENBQUM7SUFDL0IsT0FBTyxDQUFDLE1BQVMsRUFBSyxFQUFFO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN4QixlQUFlO1NBQ2xCO1FBQ0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBTSxDQUFDO0lBQ25DLENBQUMsQ0FBQztBQUNOLENBQUM7QUFWRCxvQkFVQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLE1BQU0sQ0FBVSxRQUF3QyxFQUFFLEtBQWtCO0lBQ3hGLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFRLENBQUM7SUFDL0IsT0FBTyxDQUFDLE1BQVMsRUFBSyxFQUFFO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxQixLQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyw0RUFBNEUsQ0FBQyxDQUFDO2lCQUNqRztnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNwQjtZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7YUFDeEQ7WUFDRCxlQUFlO1NBQ2xCO1FBQ0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBTSxDQUFDO0lBQ25DLENBQUMsQ0FBQztBQUNOLENBQUM7QUFsQkQsd0JBa0JDIn0=","\"use strict\";\r\n// mutation library\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction getAndSum(map, key, val) {\r\n    const prev = map.get(key) || 0;\r\n    const next = prev + val;\r\n    map.set(key, next);\r\n    return next;\r\n}\r\nexports.getAndSum = getAndSum;\r\nfunction updateMap(map, key, updater) {\r\n    const prev = map.get(key);\r\n    const next = updater(prev);\r\n    map.set(key, next);\r\n    return next;\r\n}\r\nexports.updateMap = updateMap;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL211dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbUJBQW1COztBQUVuQixTQUFnQixTQUFTLENBQUksR0FBbUIsRUFBRSxHQUFNLEVBQUUsR0FBVztJQUNqRSxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25CLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFMRCw4QkFLQztBQUVELFNBQWdCLFNBQVMsQ0FBTyxHQUFjLEVBQUUsR0FBTSxFQUFFLE9BQXdCO0lBQzVFLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25CLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFMRCw4QkFLQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst join_1 = require(\"./map/join\");\r\n/**\r\n * Negates all values in the map.\r\n */\r\nfunction negate(map) {\r\n    const ret = new Map();\r\n    for (const [key, qty] of map) {\r\n        ret.set(key, -qty);\r\n    }\r\n    return ret;\r\n}\r\nexports.negate = negate;\r\n/**\r\n * Sum all numbers together\r\n * @param it a sequence of numbers\r\n */\r\nfunction sum(...args) {\r\n    let ret = 0;\r\n    for (const num of args) {\r\n        ret += num;\r\n    }\r\n    return ret;\r\n}\r\nexports.sum = sum;\r\n/** Calculate the average of given numbers. */\r\nfunction average(arg1, ...args) {\r\n    return (arg1 + sum(...args)) / (args.length + 1);\r\n}\r\nexports.average = average;\r\n/**\r\n * Map each item to a number and then sum them up together.\r\n */\r\nfunction sumBy(mapper, it) {\r\n    let ret = 0;\r\n    for (const t of it) {\r\n        ret += mapper(t);\r\n    }\r\n    return ret;\r\n}\r\nexports.sumBy = sumBy;\r\n/**\r\n * Accumulate the sum of of maps by the key.\r\n * @param maps maps of T->number\r\n */\r\nfunction sumMaps(...maps) {\r\n    return join_1.outerJoin((...vs) => sum(...vs), ...maps);\r\n}\r\nexports.sumMaps = sumMaps;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9udW1iZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQXVDO0FBRXZDOztHQUVHO0FBQ0gsU0FBZ0IsTUFBTSxDQUFJLEdBQTRCO0lBQ2xELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFhLENBQUM7SUFDakMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUMxQixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBTkQsd0JBTUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixHQUFHLENBQUMsR0FBRyxJQUFjO0lBQ2pDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ3BCLEdBQUcsSUFBSSxHQUFHLENBQUM7S0FDZDtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQU5ELGtCQU1DO0FBRUQsOENBQThDO0FBQzlDLFNBQWdCLE9BQU8sQ0FBQyxJQUFZLEVBQUUsR0FBRyxJQUFjO0lBQ25ELE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUZELDBCQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixLQUFLLENBQUksTUFBd0IsRUFBRSxFQUFlO0lBQzlELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2hCLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEI7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFORCxzQkFNQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLE9BQU8sQ0FBSSxHQUFHLElBQW9DO0lBQzlELE9BQU8sZ0JBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFGRCwwQkFFQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The diamond-square algorithm; returns a float array with values between 0 and 1 that represents a square grid.\r\n * @see http://www.gameprogrammer.com/fractal.html#midpoint\r\n * @see http://jmecom.github.io/blog/2015/diamond-square/\r\n * @see http://stevelosh.com/blog/2016/08/lisp-jam-postmortem/#tiling-diamond-square\r\n * @see http://www.playfuljs.com/realistic-terrain-in-130-lines/\r\n */\r\nfunction diamondSquare(prng, nside, roughness) {\r\n    console.assert(Number.isInteger(Math.log2(nside - 1)), \"nside must be of the form (2^n)+1\");\r\n    const data = new Float32Array(nside * nside);\r\n    const stepMax = nside - 1;\r\n    const isValidCoor = ([x, y]) => x >= 0 && x < nside\r\n        && y >= 0 && y < nside;\r\n    const idx = ([x, y]) => y * nside + x;\r\n    const get = (target) => data[idx(target)];\r\n    const set = (target, val) => {\r\n        const i = idx(target);\r\n        console.assert(val > 0);\r\n        console.assert(data[i] === 0);\r\n        data[i] = val;\r\n    };\r\n    const assign = (target, coors, scale) => {\r\n        const validCoors = coors\r\n            .filter(isValidCoor)\r\n            .map(get);\r\n        const sum = validCoors.reduce((prev, cur) => prev + cur, 0);\r\n        const avgValue = sum / validCoors.length;\r\n        const randomness = prng() * scale;\r\n        const height = avgValue + randomness;\r\n        console.assert(Number.isFinite(height));\r\n        set(target, height);\r\n    };\r\n    const diamond = (step, scale) => {\r\n        const halfstep = step / 2;\r\n        for (let y = halfstep; y <= stepMax; y += step) {\r\n            for (let x = halfstep; x <= stepMax; x += step) {\r\n                const coors = [\r\n                    [x - halfstep, y - halfstep],\r\n                    [x + halfstep, y - halfstep],\r\n                    [x - halfstep, y + halfstep],\r\n                    [x + halfstep, y + halfstep],\r\n                ];\r\n                assign([x, y], coors, scale);\r\n            }\r\n        }\r\n    };\r\n    const square = (step, scale) => {\r\n        const halfstep = step / 2;\r\n        let startMiddle = true;\r\n        for (let y = 0; y <= stepMax; y += halfstep) {\r\n            const start = startMiddle ? halfstep : 0;\r\n            startMiddle = !startMiddle;\r\n            for (let x = start; x <= stepMax; x += step) {\r\n                const coors = [\r\n                    [x, y - halfstep],\r\n                    [x, y + halfstep],\r\n                    [x - halfstep, y],\r\n                    [x + halfstep, y],\r\n                ];\r\n                assign([x, y], coors, scale);\r\n            }\r\n        }\r\n    };\r\n    {\r\n        // set up initial values for the 4 corners\r\n        set([0, 0], prng());\r\n        set([0, nside - 1], prng());\r\n        set([nside - 1, 0], prng());\r\n        set([nside - 1, nside - 1], prng());\r\n        let scale = 0.1;\r\n        for (let step = stepMax; step > 1; step /= 2,\r\n            scale = step / nside * roughness) {\r\n            diamond(step, scale);\r\n            square(step, scale);\r\n        }\r\n    }\r\n    const maxHeight = Math.max(...data);\r\n    const minHeight = Math.min(...data);\r\n    const heightDiff = maxHeight - minHeight;\r\n    console.assert(heightDiff > 0); // TODO is this a flat map when assertion fails?\r\n    // normalize values\r\n    const normalized = data.map((x) => (x - minHeight) / heightDiff);\r\n    console.assert(normalized.every((x) => x >= 0 && x <= 1));\r\n    return normalized;\r\n}\r\nexports.diamondSquare = diamondSquare;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbW9uZFNxdWFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yYW5kL2RpYW1vbmRTcXVhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7Ozs7O0dBTUc7QUFDSCxTQUFnQixhQUFhLENBQ3pCLElBQWtCLEVBQ2xCLEtBQWEsRUFDYixTQUFpQjtJQUdqQixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0lBRTVGLE1BQU0sSUFBSSxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQztJQUU3QyxNQUFNLE9BQU8sR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFtQixFQUFFLEVBQUUsQ0FDN0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSztXQUNoQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDM0IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBd0IsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUNsRCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEIsT0FBTyxD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","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./diamondSquare\"));\r\n__export(require(\"./randomGen\"));\r\n__export(require(\"./shuffleSlice\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmFuZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFDQUFnQztBQUNoQyxpQ0FBNEI7QUFDNUIsb0NBQStCIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst numbers_1 = require(\"../numbers\");\r\n/**\r\n * Randomly generate items of type T given their probabilities (sum <= 1).\r\n * When the sum of probability < 1, it's possible to get undefined from the generator.\r\n * modified from https://stackoverflow.com/a/28933315\r\n * @param probs a map of objects and their probabilities\r\n */\r\nexports.randomGen = (probs, rand) => {\r\n    if (numbers_1.sum(...probs.values()) > 1) {\r\n        throw new Error(\"probability needs to be positive and less than 1\");\r\n    }\r\n    const results = [];\r\n    const weights = [];\r\n    for (const [key, p] of probs) {\r\n        if (p <= 0) {\r\n            throw new Error(\"probability needs to be positive and less than 1\");\r\n        }\r\n        results.push(key);\r\n        weights.push(p);\r\n    }\r\n    const randGen = rand === undefined ? Math.random : rand;\r\n    return () => {\r\n        const r = randGen();\r\n        let cummulativeProbs = 0;\r\n        for (let i = 0; i < weights.length; ++i) {\r\n            cummulativeProbs += weights[i];\r\n            if (r < cummulativeProbs) {\r\n                return results[i];\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n};\r\n/**\r\n * The \"strict\" version of randomGen(), where sum of probabilities (with at least 1 remaining items) must sum up to 1.\r\n * @param remain the remain element will have a probability of 1-sum(probs) and remain ∉ probs\r\n * @param probs a map of objects and their probabilities\r\n */\r\nexports.randomGenStrict = (remain, probs, rand) => {\r\n    if (probs.has(remain)) {\r\n        throw new Error(\"remain should ∉ probs\");\r\n    }\r\n    const gen = exports.randomGen(probs, rand);\r\n    return () => {\r\n        const ret = gen();\r\n        return ret === undefined ? remain : ret;\r\n    };\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tR2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JhbmQvcmFuZG9tR2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esd0NBQWlDO0FBRWpDOzs7OztHQUtHO0FBQ1UsUUFBQSxTQUFTLEdBQUcsQ0FBSSxLQUE4QixFQUFFLElBQW1CLEVBQUUsRUFBRTtJQUNoRixJQUFJLGFBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7S0FDdkU7SUFFRCxNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFDeEIsTUFBTSxPQUFPLEdBQWEsRUFBRSxDQUFDO0lBQzdCLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hELE9BQU8sR0FBRyxFQUFFO1FBQ1IsTUFBTSxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDcEIsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDckMsZ0JBQWdCLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxHQUFHLGdCQUFnQixFQUFFO2dCQUN0QixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtTQUNKO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNVLFFBQUEsZUFBZSxHQUFHLENBQzNCLE1BQVMsRUFBRSxLQUE4QixFQUN6QyxJQUFtQixFQUNyQixFQUFFO0lBQ0EsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUM1QztJQUNELE1BQU0sR0FBRyxHQUFHLGlCQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25DLE9BQU8sR0FBRyxFQUFFO1FBQ1IsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbEIsT0FBTyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUM1QyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/** Shuffle the given collection. */\r\nfunction shuffleSlice(it) {\r\n    return wrapper_1.wrapIt(shuffleSliceHelper(it));\r\n}\r\nexports.shuffleSlice = shuffleSlice;\r\nfunction* shuffleSliceHelper(it) {\r\n    const temp = Array.from(it);\r\n    if (temp.length === 0) {\r\n        return;\r\n    }\r\n    while (true) {\r\n        const lastIdx = temp.length - 1;\r\n        const idx = Math.floor(Math.random() * lastIdx);\r\n        yield temp[idx];\r\n        if (idx === lastIdx) {\r\n            return;\r\n        }\r\n        // swap the target with the last item\r\n        temp[idx] = temp.pop();\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZVNsaWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JhbmQvc2h1ZmZsZVNsaWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXlDO0FBRXpDLG9DQUFvQztBQUNwQyxTQUFnQixZQUFZLENBQUksRUFBZTtJQUMzQyxPQUFPLGdCQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRkQsb0NBRUM7QUFFRCxRQUFRLENBQUMsQ0FBQyxrQkFBa0IsQ0FBSSxFQUFlO0lBQzNDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFNUIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNuQixPQUFPO0tBQ1Y7SUFFRCxPQUFPLElBQUksRUFBRTtRQUNULE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWhCLElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNqQixPQUFPO1NBQ1Y7UUFFRCxxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUcsQ0FBQztLQUMzQjtBQUNMLENBQUMifQ==","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Bi-direction set, based on two Map objects. Use this class for data that has a bijective relationship.\r\n */\r\nclass BiSet extends wrapper_1.MyIterable {\r\n    constructor(...data) {\r\n        super();\r\n        this.leftMap = new Map();\r\n        this.rightMap = new Map();\r\n        this.iterate = () => {\r\n            return this.leftMap.entries();\r\n        };\r\n        for (const [t, u] of data) {\r\n            this.add(t, u);\r\n        }\r\n    }\r\n    /** Return the number of items in the set. */\r\n    get size() { return this.leftMap.size; }\r\n    /** Add a new pair to the map. */\r\n    add(left, right) {\r\n        this.leftMap.set(left, right);\r\n        this.rightMap.set(right, left);\r\n    }\r\n    /** Delete by the entry mapped by left. */\r\n    deleteLeft(left) {\r\n        const right = this.leftMap.get(left);\r\n        return right !== undefined && this.deleteHelper(left, right);\r\n    }\r\n    /** Delete by the entry mapped by right. */\r\n    deleteRight(right) {\r\n        const left = this.rightMap.get(right);\r\n        return left !== undefined && this.deleteHelper(left, right);\r\n    }\r\n    /** Get the right item by using left as the key. */\r\n    getRight(left) {\r\n        return this.leftMap.get(left);\r\n    }\r\n    /** Get the left item by using right as the key. */\r\n    getLeft(right) {\r\n        return this.rightMap.get(right);\r\n    }\r\n    /** Test if a pair exist based on left as the key. */\r\n    hasLeft(left) {\r\n        return this.leftMap.has(left);\r\n    }\r\n    /** Test if a pair exist based on right as the key. */\r\n    hasRight(right) {\r\n        return this.rightMap.has(right);\r\n    }\r\n    /** Get all items in the left set. */\r\n    lefts() {\r\n        return wrapper_1.wrapIt(this.leftMap.keys());\r\n    }\r\n    /** Get all items in the right set. */\r\n    rights() {\r\n        return wrapper_1.wrapIt(this.rightMap.keys());\r\n    }\r\n    deleteHelper(left, right) {\r\n        const ret1 = this.leftMap.delete(left);\r\n        const ret2 = this.rightMap.delete(right);\r\n        console.assert(ret1);\r\n        console.assert(ret2);\r\n        return true;\r\n    }\r\n}\r\nexports.BiSet = BiSet;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2V0L2Jpc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXFEO0FBRXJEOztHQUVHO0FBQ0gsTUFBYSxLQUFZLFNBQVEsb0JBQWtCO0lBSy9DLFlBQVksR0FBRyxJQUFtQjtRQUM5QixLQUFLLEVBQUUsQ0FBQztRQUpKLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBUSxDQUFDO1FBQzFCLGFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBUSxDQUFDO1FBNER6QixZQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNsQyxDQUFDLENBQUE7UUExREcsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtZQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNsQjtJQUNMLENBQUM7SUFFRCw2Q0FBNkM7SUFDN0MsSUFBVyxJQUFJLEtBQUssT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFL0MsaUNBQWlDO0lBQzFCLEdBQUcsQ0FBQyxJQUFPLEVBQUUsS0FBUTtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCwwQ0FBMEM7SUFDbkMsVUFBVSxDQUFDLElBQU87UUFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCwyQ0FBMkM7SUFDcEMsV0FBVyxDQUFDLEtBQVE7UUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxtREFBbUQ7SUFDNUMsUUFBUSxDQUFDLElBQU87UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsbURBQW1EO0lBQzVDLE9BQU8sQ0FBQyxLQUFRO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELHFEQUFxRDtJQUM5QyxPQUFPLENBQUMsSUFBTztRQUNsQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxzREFBc0Q7SUFDL0MsUUFBUSxDQUFDLEtBQVE7UUFDcEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQscUNBQXFDO0lBQzlCLEtBQUs7UUFDUixPQUFPLGdCQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxzQ0FBc0M7SUFDL0IsTUFBTTtRQUNULE9BQU8sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQU1PLFlBQVksQ0FBQyxJQUFPLEVBQUUsS0FBUTtRQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBMUVELHNCQTBFQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Compute the set difference of source \\ others (others treated as 1 set).\r\n */\r\nfunction difference(source, ...others) {\r\n    return others.reduce((acc, cur) => {\r\n        const curSet = new Set(cur);\r\n        const next = new Set();\r\n        for (const t of acc) {\r\n            if (!curSet.has(t)) {\r\n                next.add(t);\r\n            }\r\n        }\r\n        return next;\r\n    }, new Set(source));\r\n}\r\nexports.difference = difference;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZmVyZW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXQvZGlmZmVyZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOztHQUVHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFJLE1BQXVCLEVBQUUsR0FBRyxNQUEwQjtJQUNoRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUssQ0FBQztRQUMxQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNmO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBWEQsZ0NBV0MifQ==","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./biset\"));\r\n__export(require(\"./difference\"));\r\n__export(require(\"./intersect\"));\r\n__export(require(\"./unionfind\"));\r\n__export(require(\"./wrapper\"));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2V0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkJBQXdCO0FBRXhCLGtDQUE2QjtBQUM3QixpQ0FBNEI7QUFDNUIsaUNBQTRCO0FBQzVCLCtCQUEwQiJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst combine_1 = require(\"../iter/combine\");\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\nconst groupBy_1 = require(\"../map/groupBy\");\r\nconst wrapper_2 = require(\"./wrapper\");\r\nfunction intersectHelper(...sets) {\r\n    switch (sets.length) {\r\n        case 0:\r\n            return new Set();\r\n        case 1:\r\n            return new Set(sets[0]);\r\n        case 2:\r\n            let small;\r\n            let big;\r\n            if (sets[0].size > sets[1].size) {\r\n                small = sets[1];\r\n                big = sets[0];\r\n            }\r\n            else {\r\n                small = sets[0];\r\n                big = sets[1];\r\n            }\r\n            return new Set(wrapper_1.wrapIt(small).filter((t) => big.has(t)));\r\n        default:\r\n            return new Set(wrapper_1.wrapIt(groupBy_1.groupBy(combine_1.combine(...sets), (t) => t))\r\n                .filter(([, us]) => sets.length === us.length)\r\n                .map(([t]) => t));\r\n    }\r\n}\r\n/**\r\n * Find the intersection of given sets.\r\n * @param sets 1 or more sets\r\n */\r\nexports.intersect = (...sets) => wrapper_2.wrapSet(intersectHelper(...sets));\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NldC9pbnRlcnNlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBMEM7QUFDMUMsNkNBQXlDO0FBQ3pDLDRDQUF5QztBQUV6Qyx1Q0FBb0M7QUFFcEMsU0FBUyxlQUFlLENBQUksR0FBRyxJQUE0QjtJQUV2RCxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDakIsS0FBSyxDQUFDO1lBQ0YsT0FBTyxJQUFJLEdBQUcsRUFBSyxDQUFDO1FBQ3hCLEtBQUssQ0FBQztZQUNGLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsS0FBSyxDQUFDO1lBQ0YsSUFBSSxLQUFLLENBQUM7WUFDVixJQUFJLEdBQW9CLENBQUM7WUFFekIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQzdCLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNqQjtZQUNELE9BQU8sSUFBSSxHQUFHLENBQUMsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVEO1lBQ0ksT0FBTyxJQUFJLEdBQUcsQ0FBQyxnQkFBTSxDQUFDLGlCQUFPLENBQUMsaUJBQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUM7aUJBQzdDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7QUFDTCxDQUFDO0FBRUQ7OztHQUdHO0FBQ1UsUUFBQSxTQUFTLEdBQUcsQ0FBSSxHQUFHLElBQTRCLEVBQWEsRUFBRSxDQUFDLGlCQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyJ9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst wrapper_1 = require(\"../iter/wrapper\");\r\n/**\r\n * Union-find data structure with path compression. Deletion of a single element uses\r\n * the tombstone method, deletion of sets uses brute-force.\r\n */\r\nclass UnionFind extends wrapper_1.MyIterable {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toId = new Map();\r\n        this.parents = new Map();\r\n        this.id = 0;\r\n        /** All sets that belong to elements in ts becomes 1 set. */\r\n        this.union = (...ts) => {\r\n            if (ts.length > 0) {\r\n                const t0 = ts[0];\r\n                for (let i = 1; i < ts.length; ++i) {\r\n                    const ti = ts[i];\r\n                    this.union2(t0, ti);\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Test whether left and right are in the same set.\r\n         */\r\n        this.isSameSet = (left, right) => {\r\n            console.assert(left !== undefined);\r\n            console.assert(right !== undefined);\r\n            if (left === right) {\r\n                return true;\r\n            }\r\n            const leftRes = this.find(left);\r\n            if (leftRes === undefined) {\r\n                return false;\r\n            }\r\n            const rightRes = this.find(right);\r\n            if (rightRes === undefined) {\r\n                return false;\r\n            }\r\n            const [lParent] = leftRes;\r\n            const [rParent] = rightRes;\r\n            return lParent === rParent;\r\n        };\r\n        /** Each item in ts becomes its own set. */\r\n        this.tear = (...ts) => {\r\n            // just delete the id mapping, parent structure remain the same\r\n            for (const t of ts) {\r\n                if (this.toId.delete(t)) {\r\n                    this.memoizedSets = undefined;\r\n                    this.add(t);\r\n                }\r\n                // otherwise t is not in the set\r\n            }\r\n            this.recycle();\r\n            return this;\r\n        };\r\n        /** Remove an item. */\r\n        this.delete = (t) => {\r\n            const ret = this.toId.delete(t);\r\n            if (ret) {\r\n                this.memoizedSets = undefined;\r\n            }\r\n            this.recycle();\r\n            return ret;\r\n        };\r\n        /** Creates a copy of this data structure. */\r\n        this.clone = () => {\r\n            const ret = new UnionFind();\r\n            ret.toId = new Map(this.toId);\r\n            ret.parents = new Map(this.parents);\r\n            ret.id = this.id;\r\n            return ret;\r\n        };\r\n        /**\r\n         * Delete items based on ts.\r\n         */\r\n        this.deleteSets = (...ts) => {\r\n            let isDeleted = false;\r\n            for (const t of ts) {\r\n                for (const t1 of this.get(t)) {\r\n                    const id = this.toId.get(t1);\r\n                    this.parents.delete(id);\r\n                    this.toId.delete(t1);\r\n                    isDeleted = true;\r\n                }\r\n            }\r\n            if (isDeleted) {\r\n                this.memoizedSets = undefined;\r\n            }\r\n            this.recycle();\r\n        };\r\n        /** Test whether t is in the set */\r\n        this.has = (t) => this.find(t) !== undefined;\r\n        this.iterate = () => {\r\n            // naive algorithm\r\n            if (this.memoizedSets === undefined) {\r\n                this.memoizedSets = this.aggregate();\r\n            }\r\n            return this.memoizedSets.values();\r\n        };\r\n        this.aggregate = () => {\r\n            const ret = new Map();\r\n            for (const [val, id] of this.toId) {\r\n                const [parent] = this.findInner(id);\r\n                const temp = ret.get(parent);\r\n                if (temp === undefined) {\r\n                    ret.set(parent, new Set([val]));\r\n                }\r\n                else {\r\n                    temp.add(val);\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n        /** Find the item or add it to its own set */\r\n        this.findMut = (item) => {\r\n            const prev = this.toId.get(item);\r\n            if (prev === undefined) {\r\n                return this.add(item);\r\n            }\r\n            return this.findInner(prev);\r\n        };\r\n        this.union2 = (left, right) => {\r\n            // sanity check\r\n            console.assert(left !== undefined);\r\n            console.assert(right !== undefined);\r\n            this.memoizedSets = undefined;\r\n            const [lRoot, lRank] = this.findMut(left);\r\n            const [rRoot, rRank] = this.findMut(right);\r\n            if (lRoot === rRoot) {\r\n                return this;\r\n            }\r\n            if (lRank < rRank) {\r\n                this.parents.set(lRoot, [rRoot, lRank]);\r\n            }\r\n            else if (lRank > rRank) {\r\n                this.parents.set(rRoot, [lRoot, rRank]);\r\n            }\r\n            else {\r\n                this.parents.set(lRoot, [rRoot, rRank + 1]);\r\n            }\r\n            this.recycle();\r\n            return this;\r\n        };\r\n        this.recycle = () => {\r\n            if (this.garbageRatio < 2) {\r\n                return;\r\n            }\r\n            // otherwise structureSize is twice larger than necessary\r\n            this.memoizedSets = undefined;\r\n            const ret = new UnionFind();\r\n            for (const ts of this) {\r\n                const t1 = ts.values().next().value;\r\n                console.assert(t1 !== undefined); // ts is a grouping of all sets, so each set must have at least 1 element\r\n                for (const t2 of ts) {\r\n                    ret.union(t1, t2);\r\n                }\r\n            }\r\n            // simply replace data\r\n            this.toId = ret.toId;\r\n            this.parents = ret.parents;\r\n            this.id = ret.id;\r\n        };\r\n        this.add = (item) => {\r\n            console.assert(this.toId.get(item) === undefined);\r\n            this.memoizedSets = undefined;\r\n            // set item to be item's parent\r\n            const id = ++this.id;\r\n            this.toId.set(item, id);\r\n            const ret = [id, 0];\r\n            this.parents.set(id, ret);\r\n            return ret;\r\n        };\r\n        this.find = (item) => {\r\n            const prev = this.toId.get(item);\r\n            if (prev === undefined) {\r\n                return undefined;\r\n            }\r\n            return this.findInner(prev);\r\n        };\r\n        this.findInner = (targetId) => {\r\n            const path = [];\r\n            let prev = targetId;\r\n            while (true) {\r\n                const [parent, rank] = this.parents.get(prev);\r\n                if (prev === parent) {\r\n                    // path compression\r\n                    for (const id of path) {\r\n                        this.parents.set(id, [parent, rank]);\r\n                    }\r\n                    const ret = [parent, rank];\r\n                    return ret;\r\n                }\r\n                // collect ancestors for future path compression\r\n                path.push(prev);\r\n                prev = parent;\r\n            }\r\n        };\r\n    }\r\n    /** Get the number of items in this structure. */\r\n    get size() { return this.toId.size; }\r\n    /** Retrieve the entire set belonging to t using the naive algorithm, results are memoized internally. */\r\n    get(t) {\r\n        return wrapper_1.wrapIt(this.getHelper(t));\r\n    }\r\n    *getHelper(t) {\r\n        const result = this.find(t);\r\n        if (result === undefined) { // element doesn't exist\r\n            return;\r\n        }\r\n        const [parent] = result;\r\n        if (this.memoizedSets === undefined) {\r\n            this.memoizedSets = this.aggregate();\r\n        }\r\n        const rets = this.memoizedSets.get(parent);\r\n        if (rets === undefined) {\r\n            return;\r\n        }\r\n        for (const s of rets) {\r\n            yield s;\r\n        }\r\n    }\r\n    get structureSize() { return this.parents.size; }\r\n    get garbageRatio() { return this.size === 0 ? 0 : this.structureSize / this.size; }\r\n}\r\nexports.UnionFind = UnionFind;\r\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst iter_1 = require(\"../iter\");\r\nconst difference_1 = require(\"./difference\");\r\nconst intersect_1 = require(\"./intersect\");\r\n/**\r\n * Add all ts into the set.\r\n */\r\nfunction unionMut(set, ...ts) {\r\n    for (const t of ts) {\r\n        set.add(t);\r\n    }\r\n    return set;\r\n}\r\nexports.unionMut = unionMut;\r\nfunction wrapSet(set) {\r\n    return {\r\n        add: (t) => wrapSet(set.add(t)),\r\n        collect: () => Array.from(set),\r\n        count: () => iter_1.wrapIt(set).count(),\r\n        delete: (t) => set.delete(t),\r\n        difference: (...others) => wrapSet(difference_1.difference(set, ...others)),\r\n        every: (pred) => iter_1.wrapIt(set).every(pred),\r\n        filter: (pred) => makeSet(iter_1.wrapIt(set).filter(pred)),\r\n        first: () => iter_1.wrapIt(set).first(),\r\n        flatMap: (mapper) => iter_1.wrapIt(set).flatMap(mapper),\r\n        forEach: (callBackFn) => iter_1.wrapIt(set).forEach(callBackFn),\r\n        has: (t) => set.has(t),\r\n        intersect: (...others) => intersect_1.intersect(set, ...others),\r\n        map: (mapper) => makeSet(iter_1.wrapIt(set).map(mapper)),\r\n        pin: (hammer) => makeSet(iter_1.wrapIt(set).pin(hammer)),\r\n        reduce: (reducer, base) => iter_1.wrapIt(set).reduce(reducer, base),\r\n        get size() { return set.size; },\r\n        some: (pred) => iter_1.wrapIt(set).some(pred),\r\n        take: (count) => makeSet(iter_1.wrapIt(set).take(count)),\r\n        *[Symbol.iterator]() {\r\n            for (const t of set) {\r\n                yield t;\r\n            }\r\n        },\r\n    };\r\n}\r\nexports.wrapSet = wrapSet;\r\nfunction makeSet(it) {\r\n    return wrapSet(new Set(it));\r\n}\r\nexports.makeSet = makeSet;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXQvd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFpQztBQUVqQyw2Q0FBMEM7QUFDMUMsMkNBQXdDO0FBRXhDOztHQUVHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFJLEdBQVcsRUFBRSxHQUFHLEVBQU87SUFDL0MsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNkO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDO0FBTEQsNEJBS0M7QUFFRCxTQUFnQixPQUFPLENBQUksR0FBVztJQUNsQyxPQUFPO1FBQ0gsR0FBRyxFQUFFLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDOUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUU7UUFDaEMsTUFBTSxFQUFFLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMvQixVQUFVLEVBQUUsQ0FBQyxHQUFHLE1BQTBCLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyx1QkFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ2xGLEtBQUssRUFBRSxDQUFDLElBQWtDLEVBQUUsRUFBRSxDQUFDLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3RFLE1BQU0sRUFBRSxDQUFDLElBQWtDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pGLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO1FBQ2hDLE9BQU8sRUFBRSxDQUFJLE1BQXdDLEVBQUUsRUFBRSxDQUFDLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3JGLE9BQU8sRUFBRSxDQUFDLFVBQStDLEVBQUUsRUFBRSxDQUFDLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQzdGLEdBQUcsRUFBRSxDQUFDLENBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekIsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUE4QixFQUFFLEVBQUUsQ0FBQyxxQkFBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUMzRSxHQUFHLEVBQUUsQ0FBSSxNQUE4QixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RSxHQUFHLEVBQUUsQ0FBSSxNQUE4QixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RSxNQUFNLEVBQUUsQ0FBSSxPQUF5QyxFQUFFLElBQU8sRUFBRSxFQUFFLENBQUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO1FBQ3BHLElBQUksSUFBSSxLQUFLLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxFQUFFLENBQUMsSUFBa0MsRUFBRSxFQUFFLENBQUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEUsSUFBSSxFQUFFLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNkLEtBQUssTUFBTSxDQUFDLElBQUksR0FBRyxFQUFFO2dCQUNqQixNQUFNLENBQUMsQ0FBQzthQUNYO1FBQ0wsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDO0FBMUJELDBCQTBCQztBQUVELFNBQWdCLE9BQU8sQ0FBSSxFQUFlO0lBQ3RDLE9BQU8sT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUZELDBCQUVDIn0=","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/** Remove this when Typescript has better support for tuples */\r\nfunction makePair(t, u) {\r\n    return [t, u];\r\n}\r\nexports.makePair = makePair;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVwbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHVwbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnRUFBZ0U7QUFDaEUsU0FBZ0IsUUFBUSxDQUFPLENBQUksRUFBRSxDQUFJO0lBQ3JDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFXLENBQUM7QUFDNUIsQ0FBQztBQUZELDRCQUVDIn0=","import { unionMut } from \"myalgo-ts\";\r\nimport { memory } from \"../galaxy_bg\";\r\nimport { MIN_GRID_SIZE } from \"./view/def\";\r\nconst channelKindValues = [\r\n    0 /* Galaxy */,\r\n    1 /* Tabs */,\r\n    2 /* SwitchTab */,\r\n    3 /* NameSearchUpdate */,\r\n];\r\nconst DEFAULT_TABS = [\r\n    {\r\n        kind: 0 /* Galaxy */,\r\n        tabId: Symbol(),\r\n    },\r\n    {\r\n        kind: 3 /* Player */,\r\n        tabId: Symbol(),\r\n    },\r\n    {\r\n        kind: 4 /* Nation */,\r\n        tabId: Symbol(),\r\n    },\r\n    {\r\n        kind: 5 /* Station */,\r\n        tabId: Symbol(),\r\n    },\r\n    {\r\n        kind: 6 /* People */,\r\n        tabId: Symbol(),\r\n    },\r\n    {\r\n        kind: 2 /* Search */,\r\n        tabId: Symbol(),\r\n    },\r\n];\r\nexport class Database {\r\n    constructor(base) {\r\n        // somewhat-persistent temp data; handled by external views\r\n        this.galaxyViewData = {\r\n            center: [0, 0],\r\n            gridSize: MIN_GRID_SIZE,\r\n        };\r\n        this.cacheSearchResult = [];\r\n        this.subscribers = new Set();\r\n        this.flags = new Set();\r\n        this.reset(base);\r\n    }\r\n    reset(d) {\r\n        this.galaxy = d.galaxy;\r\n        const tabs = DEFAULT_TABS.slice();\r\n        const galaxyTabId = tabs[0].tabId;\r\n        this.curTabId = galaxyTabId;\r\n        this.setTabsHelper(tabs);\r\n        this.cacheSearchResult = [];\r\n        this.notify(...channelKindValues);\r\n    }\r\n    set searchName(name) {\r\n        clearInterval(this.searchNameId);\r\n        this.searchNameId = setInterval(() => {\r\n            this.cacheSearchResult = this.galaxy.interop_search_name(name);\r\n            this.notify(3 /* NameSearchUpdate */);\r\n            clearInterval(this.searchNameId);\r\n        }, 300);\r\n    }\r\n    get searchNameResult() {\r\n        return this.cacheSearchResult;\r\n    }\r\n    get tabId() {\r\n        return this.curTabId;\r\n    }\r\n    set tabId(tabId) {\r\n        this.switchTabHelper(tabId);\r\n        this.notify();\r\n    }\r\n    calDrawData(tlX, tlY, brX, brY, gridSize) {\r\n        return this.galaxy.interop_cal_draw_data(tlX, tlY, brX, brY, gridSize);\r\n    }\r\n    getPlanetName(planetId) {\r\n        return this.galaxy.get_planet_name(planetId.Planet);\r\n    }\r\n    /*\r\n    public getPlanetInfo(planetId: IPlanetId): IPlanetInfo {\r\n        return this.galaxy.interop_get_planet_info(planetId);\r\n    }\r\n    */\r\n    /*\r\n    public calColonyCivilianDemands(colonyId: IColonyId): Uint32Array {\r\n        return this.galaxy.interop_cal_civilian_demands(colonyId);\r\n    }\r\n\r\n    public calSupply(colonyId: IColonyId): Uint32Array {\r\n        return this.galaxy.interop_cal_supply(colonyId);\r\n    }\r\n\r\n    public calColonyCorpDemands(colonyId: IColonyId): Uint32Array {\r\n        return this.galaxy.interop_cal_corporate_demands(colonyId);\r\n    }\r\n    */\r\n    /*\r\n    public createPlayer(name: string, job: Job): ISpecialist {\r\n        return this.galaxy.interop_create_player(name, job);\r\n    }\r\n    */\r\n    handleCoorSearch(x, y) {\r\n        const galaxy2 = this.galaxy;\r\n        const results = galaxy2.interop_search(x, y);\r\n        const unwrapped = results.map((result) => {\r\n            const id = result.id;\r\n            return { id, name: result.name };\r\n        });\r\n        switch (unwrapped.length) {\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                const result = results[0];\r\n                const id = result.id;\r\n                if (id !== undefined) {\r\n                    if (id.Planet !== undefined) {\r\n                        const planetId = id;\r\n                        this.switchPlanetTab(planetId);\r\n                    }\r\n                    else if (id.Star !== undefined) {\r\n                        console.log(unwrapped);\r\n                        // TODO ignore for now\r\n                    }\r\n                    else {\r\n                        throw new Error(\"not handled\");\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                this.cacheSearchResult = unwrapped;\r\n                console.assert(false); // TODO switch to the search panel\r\n                break;\r\n        }\r\n    }\r\n    get tabs() {\r\n        return this.tabState.slice();\r\n    }\r\n    getPlanetEdges(planetId) {\r\n        return this.galaxy.get_planet_edges(planetId);\r\n    }\r\n    getPlanetPoints(planetId) {\r\n        const ptr = this.galaxy.get_planet_points(planetId);\r\n        const dim = this.galaxy.cal_planet_dim(planetId);\r\n        const memorySize = 2 * dim;\r\n        const ret = new Float32Array(memory.buffer, ptr, memorySize);\r\n        console.assert(ret.length > 0);\r\n        return ret;\r\n    }\r\n    addPlanetTab(planetId) {\r\n        const tabs = this.tabState;\r\n        // perform linear search; add a new tab if the planet isn't listed in the tabs already\r\n        const tab = tabs.find((x) => x.kind === 1 /* Planet */ &&\r\n            x.planetId.Planet === planetId.Planet);\r\n        if (tab !== undefined) {\r\n            return tab.tabId;\r\n        }\r\n        const tabId = Symbol();\r\n        tabs.push({\r\n            kind: 1 /* Planet */,\r\n            planetId,\r\n            tabId,\r\n        });\r\n        this.setTabsHelper(tabs);\r\n        return tabId;\r\n    }\r\n    switchPlanetTab(planetId) {\r\n        console.log(\"switching view to planet id:\", planetId);\r\n        const tabId = this.addPlanetTab(planetId);\r\n        this.switchTabHelper(tabId);\r\n        this.notify();\r\n    }\r\n    moveTabToFront(tabId) {\r\n        const numBaseTabs = DEFAULT_TABS.length;\r\n        const base = this.tabState.slice(0, numBaseTabs);\r\n        if (base.some((x) => x.tabId === tabId)) {\r\n            return;\r\n        }\r\n        const target = this.tabState.find((x) => x.tabId === tabId);\r\n        console.assert(target !== undefined);\r\n        const rest = this.tabState.slice(numBaseTabs).filter((x) => x.tabId !== tabId);\r\n        this.tabState = [\r\n            ...base,\r\n            target,\r\n            ...rest,\r\n        ];\r\n        const tabLimit = numBaseTabs + 10; // TODO\r\n        const tabLen = this.tabState.length;\r\n        if (tabLen > tabLimit) {\r\n            console.assert(tabLen === tabLimit + 1);\r\n            this.tabState.pop();\r\n        }\r\n    }\r\n    get data() {\r\n        const ret = {\r\n            galaxy: this.galaxy,\r\n        };\r\n        return ret;\r\n    }\r\n    tick() {\r\n        this.galaxy = this.galaxy.cal_next_state();\r\n        this.notify(0 /* Galaxy */);\r\n    }\r\n    addFlags(...flags) {\r\n        unionMut(this.flags, ...flags);\r\n    }\r\n    notify(...flags) {\r\n        this.addFlags(...flags);\r\n        for (const subscriber of this.subscribers) {\r\n            subscriber.update(this.flags);\r\n        }\r\n        this.flags.clear();\r\n    }\r\n    add(...observers) {\r\n        for (const subscriber of observers) {\r\n            console.assert(!this.subscribers.has(subscriber), \"double-subscribing the same subscriber\");\r\n            this.subscribers.add(subscriber);\r\n        }\r\n        this.notify(...channelKindValues);\r\n    }\r\n    delete(subscriber) {\r\n        const isDeleted = this.subscribers.delete(subscriber);\r\n        console.assert(isDeleted, \"unsubscribing a non-exist subscriber\");\r\n        this.notify(...channelKindValues);\r\n    }\r\n    clear() {\r\n        this.subscribers.clear();\r\n        this.notify(...channelKindValues);\r\n    }\r\n    setTabsHelper(t) {\r\n        console.assert(t !== null && t !== undefined);\r\n        this.tabState = t.slice();\r\n        this.addFlags(1 /* Tabs */);\r\n    }\r\n    switchTabHelper(tabId) {\r\n        const existed = this.tabState.some((x) => x.tabId === tabId);\r\n        console.assert(existed);\r\n        if (this.curTabId !== tabId) {\r\n            this.curTabId = tabId;\r\n            this.addFlags(2 /* SwitchTab */);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=database.js.map","import { bootstrap, CombatStyle, Galaxy, SquadKind } from \"../galaxy\";\r\nimport { Database } from \"./database\";\r\nimport { TICK_PERIOD } from \"./model/def\";\r\nimport { SwitchView } from \"./view/SwitchView\";\r\nconst root = document.body;\r\nconsole.assert(root !== null);\r\nfunction makeInitialState() {\r\n    const data = {\r\n        galaxy: Galaxy.new(),\r\n    };\r\n    const ret = new Database(data);\r\n    //   ret.createPlayer(\"Player\", Job.CEO);\r\n    return ret;\r\n}\r\n{\r\n    bootstrap();\r\n    const db = makeInitialState();\r\n    const squadKindKeys = [];\r\n    // tslint:disable-next-line:forin\r\n    for (const key in SquadKind) {\r\n        squadKindKeys.push(key);\r\n    }\r\n    db.galaxy.add_division_template([squadKindKeys[SquadKind.Robot], squadKindKeys[SquadKind.Infantry]], CombatStyle.Push, false);\r\n    const template = db.galaxy.get_division_template(0);\r\n    console.log(template);\r\n    console.log(SquadKind[template.squads[0]]);\r\n    db.galaxy.train_division(0);\r\n    db.galaxy.train_division(0);\r\n    db.galaxy.train_division(0);\r\n    db.galaxy.train_division(0);\r\n    const switchView = new SwitchView(db);\r\n    const breakpointButton = document.createElement(\"input\");\r\n    breakpointButton.value = \"Debugger\";\r\n    breakpointButton.type = \"button\";\r\n    breakpointButton.onclick = () => {\r\n        debugger;\r\n    };\r\n    const endTurnButton = document.createElement(\"input\");\r\n    endTurnButton.value = \"End Turn\";\r\n    endTurnButton.type = \"button\";\r\n    endTurnButton.onclick = () => db.tick();\r\n    const restPanel = document.createElement(\"div\");\r\n    restPanel.className = \"restPanel\";\r\n    const testPanel = document.createElement(\"div\");\r\n    testPanel.style.display = \"flex\";\r\n    const planetDim = document.createElement(\"div\");\r\n    const observers = [];\r\n    /*\r\n    const [width, height] = db.galaxy.get_planet_tile_dimension();\r\n    planetDim.textContent = `width:${width}, height:${height}`;\r\n    const colonyLabel = document.createElement(\"div\");\r\n    const tileTable = document.createElement(\"table\");\r\n    tileTable.style.borderCollapse = \"collapse\";\r\n\r\n    const privateMoneyLabel = document.createElement(\"div\");\r\n    const publicMoneyLabel = document.createElement(\"div\");\r\n\r\n    const industryLabel = document.createElement(\"div\");\r\n\r\n    const productTable = document.createElement(\"table\");\r\n    productTable.style.borderCollapse = \"collapse\";\r\n\r\n    const colonySet = document.createElement(\"fieldset\");\r\n    const colonyLegend = document.createElement(\"legend\");\r\n    colonyLegend.textContent = \"Colony\";\r\n\r\n    colonySet.appendChild(colonyLegend);\r\n    colonySet.appendChild(colonyLabel);\r\n    colonySet.appendChild(publicMoneyLabel);\r\n    colonySet.appendChild(privateMoneyLabel);\r\n    colonySet.appendChild(planetDim);\r\n    colonySet.appendChild(industryLabel);\r\n    colonySet.appendChild(productTable);\r\n\r\n    testPanel.appendChild(colonySet);\r\n    testPanel.appendChild(tileTable);\r\n\r\n    const select = testPanel.appendChild(document.createElement(\"select\"));\r\n    select.multiple = true;\r\n    select.onchange = () => {\r\n        const selected = [];\r\n        for (const option of select.options) {\r\n            if (option.selected) {\r\n                selected.push(option.value);\r\n            }\r\n        }\r\n\r\n        console.table(selected.map((idx) => {\r\n            const army = db.galaxy.get_army(Number(idx));\r\n            const obj = {\r\n                exoskeleton: army.exoskeleton,\r\n                rifle: army.rifle,\r\n                saber: army.saber,\r\n                troops: army.troops,\r\n                uniform: army.uniform,\r\n            };\r\n            list.push({\r\n                idx, obj,\r\n            });\r\n            army.free();\r\n            return ({ idx, army });\r\n        }));\r\n    };\r\n\r\n    const neighbourColonies = testPanel.appendChild(new NeighbourColoniesView(db));\r\n\r\n    observers.push(() => {\r\n        neighbourColonies.update();\r\n    });\r\n\r\n    observers.push(() => {\r\n        const numArmies = db.galaxy.get_armies_len();\r\n        if (numArmies > select.children.length) {\r\n            const start = select.children.length;\r\n            const diff = numArmies - select.children.length;\r\n            for (let i = 0; i < diff; i++) {\r\n                const id = i + start;\r\n                const option1 = select.appendChild(document.createElement(\"option\"));\r\n                option1.textContent = `Army ${id}`;\r\n                option1.value = id.toString();\r\n            }\r\n        } else if (numArmies < select.children.length) {\r\n            const diff = select.children.length - numArmies;\r\n            for (let i = 0; i < diff; i++) {\r\n                select.lastElementChild!.remove();\r\n            }\r\n        }\r\n    });\r\n\r\n    {\r\n        // initial test data\r\n        //  const galaxy = db.galaxy;\r\n        //  const [x, y] = [3, 5];\r\n        //  galaxy.mark_controlled_tile(x, y, true);\r\n        // galaxy.add_industries(x, y, 21, 20);\r\n    }\r\n\r\n    {\r\n\r\n        observers.push(() => {\r\n            //\r\n            const colony = db.galaxy.get_colony();\r\n            setIfDiff(publicMoneyLabel, `public money: ${colony.public_money}`);\r\n            setIfDiff(privateMoneyLabel, `private money: ${colony.private_money}`);\r\n            colony.free();\r\n        });\r\n\r\n        observers.push(() => { colonyLabel.textContent = db.galaxy.print_dev(); });\r\n\r\n        observers.push(() => {\r\n            const availableIndustry = db.galaxy.cal_colony_industry();\r\n            const usedIndustry = db.galaxy.cal_colony_used_industry();\r\n            setIfDiff(industryLabel, `# factories: ${availableIndustry} (${usedIndustry} used)`);\r\n        });\r\n\r\n        {\r\n            const fragRows = document.createDocumentFragment();\r\n            for (let y = 0; y < height; y++) {\r\n                const row = fragRows.appendChild(document.createElement(\"tr\"));\r\n                for (let x = 0; x < width; x++) {\r\n                    const data = row.appendChild(document.createElement(\"td\"));\r\n                    data.style.border = \"1px solid black\";\r\n\r\n                    observers.push(() => {\r\n                        if (db.galaxy.is_tile_controlled(x, y)) {\r\n                            data.style.background = \"yellow\";\r\n                        } else if (db.galaxy.is_tile_controlled_by_others(x, y)) {\r\n                            data.style.background = \"orange\";\r\n                        } else {\r\n                            data.style.background = null;\r\n                        }\r\n                    });\r\n\r\n                    observers.push(() => {\r\n                        const tile = db.galaxy.get_tile_at(x, y);\r\n                        const garrison = db.galaxy.get_garrison(x, y);\r\n\r\n                        const text = `K:${tile.kind}, F:${tile.factories}, G:${garrison}`;\r\n\r\n                        tile.free();\r\n\r\n                        setIfDiff(data, text);\r\n                    });\r\n\r\n                    data.onclick = () => {\r\n                        db.galaxy.add_industries(x, y, 1);\r\n                    };\r\n                }\r\n            }\r\n\r\n            tileTable.appendChild(fragRows);\r\n        }\r\n\r\n        {\r\n            const fragRows = document.createDocumentFragment();\r\n\r\n            {\r\n                const header = fragRows.appendChild(document.createElement(\"tr\"));\r\n                header.appendChild(document.createElement(\"td\")).textContent = \"Product\";\r\n\r\n                header.appendChild(document.createElement(\"td\")).textContent = \"Capacity\";\r\n\r\n                header.appendChild(document.createElement(\"td\")).textContent = \"Qty\";\r\n            }\r\n\r\n            for (const product of allProducts()) {\r\n                const row = fragRows.appendChild(document.createElement(\"tr\"));\r\n                const productName = row.appendChild(document.createElement(\"td\"));\r\n                const productionCapacity = row.appendChild(document.createElement(\"td\"));\r\n                const qty = row.appendChild(document.createElement(\"td\"));\r\n                const change = row.appendChild(document.createElement(\"td\"));\r\n\r\n                const addButton = change.appendChild(document.createElement(\"button\"));\r\n                addButton.textContent = \"+\";\r\n                addButton.onclick = () => {\r\n                    db.galaxy.add_industry(product);\r\n                };\r\n\r\n                const removeButton = change.appendChild(document.createElement(\"button\"));\r\n                removeButton.textContent = \"-\"; removeButton.onclick = () => {\r\n                    db.galaxy.remove_industry(product);\r\n                };\r\n\r\n                observers.push(() => {\r\n                    const galaxy = db.galaxy;\r\n                    const availableIndustry = galaxy.cal_colony_industry();\r\n                    const usedIndustry = galaxy.cal_colony_used_industry();\r\n                    addButton.disabled = availableIndustry === usedIndustry;\r\n\r\n                    const products = galaxy.get_colony_storage(product);\r\n                    removeButton.disabled = products.production_capacity === 0;\r\n                    products.free();\r\n                });\r\n\r\n                productName.textContent = getProductName(product);\r\n\r\n                observers.push(() => {\r\n                    const productData = db.galaxy.get_colony_storage(product);\r\n                    setIfDiff(productionCapacity, productData.production_capacity.toString());\r\n                    setIfDiff(qty, productData.qty.toString());\r\n\r\n                    productData.free();\r\n                });\r\n            }\r\n            productTable.appendChild(fragRows);\r\n        }\r\n    }\r\n    */\r\n    const test = {\r\n        update() {\r\n            for (const observer of observers) {\r\n                observer();\r\n            }\r\n        },\r\n    };\r\n    // elements ordering\r\n    restPanel.appendChild(breakpointButton);\r\n    restPanel.appendChild(endTurnButton);\r\n    //  root.appendChild(testPanel);\r\n    root.appendChild(switchView);\r\n    root.appendChild(restPanel);\r\n    // subsribe components and then start drawing\r\n    db.add(test, switchView);\r\n    // start the game\r\n    setInterval(() => db.tick(), TICK_PERIOD); // update game world\r\n}\r\n//# sourceMappingURL=index.js.map","import { get_ticks_per_second, Product } from \"../../galaxy\";\r\nconst TICKS_PER_SECOND = get_ticks_per_second();\r\nexport const TICK_PERIOD = 1000 / TICKS_PER_SECOND; // in milliseconds, used in setInterval()\r\nconsole.log(TICK_PERIOD);\r\nconst productValues = Object\r\n    .keys(Product)\r\n    .filter((k) => typeof Product[k] === \"number\")\r\n    .map((k) => Number(Product[k]))\r\n    .sort((a, b) => a - b);\r\nexport function allProducts() {\r\n    return productValues.slice();\r\n}\r\nexport function getProductName(product) {\r\n    switch (product) {\r\n        case Product.Accessory: return \"Accessory\";\r\n        case Product.Apparel: return \"Apparel\";\r\n        case Product.Crop: return \"Crop\";\r\n        case Product.Metal: return \"Metal\";\r\n        case Product.Concrete: return \"Concrete\";\r\n        case Product.Supply: return \"Supply\";\r\n        case Product.Alloy: return \"Alloy\";\r\n        case Product.Gem: return \"Gem\";\r\n        case Product.Fuel: return \"Fuel\";\r\n        case Product.Fiber: return \"Fiber\";\r\n        case Product.Chemical: return \"Chemical\";\r\n        case Product.Circuit: return \"Circuit\";\r\n        case Product.Computer: return \"Computer\";\r\n        case Product.Food: return \"Food\";\r\n        case Product.Medicine: return \"Medicine\";\r\n        case Product.Furniture: return \"Furniture\";\r\n        case Product.Vehicle: return \"Vehicle\";\r\n        case Product.Machine: return \"Machine\";\r\n        case Product.Tool: return \"Tool\";\r\n        case Product.Hull: return \"Hull\";\r\n        case Product.Engine: return \"Engine\";\r\n        case Product.Weapon: return \"Weapon\";\r\n        case Product.Shield: return \"Shield\";\r\n        case Product.Armor: return \"Armor\";\r\n        case Product.Countermeasure: return \"Countermeasure\";\r\n        case Product.Rifle: return \"Rifle\";\r\n        case Product.Uniform: return \"Uniform\";\r\n        case Product.Saber: return \"Saber\";\r\n        case Product.Exoskeleton: return \"Exoskeleton\";\r\n        default:\r\n            throw new Error(\"not handled\");\r\n    }\r\n}\r\ntry {\r\n    allProducts().map((x) => getProductName(x));\r\n}\r\ncatch (e) {\r\n    console.assert(false, \"sanity check failed\");\r\n}\r\n//# sourceMappingURL=def.js.map","import { add, determinant, dot, norm, project, subtract } from \"myalgo-ts\";\r\nimport { get_planet_vertex_dist } from \"../../galaxy\";\r\nimport { MAX_GRID_SIZE, MIN_GRID_SIZE } from \"./def\";\r\nexport class CanvasOperator {\r\n    constructor(canvas, viewData) {\r\n        this.canvas = canvas;\r\n        this.viewData = viewData;\r\n    }\r\n    toVpCoor([x, y]) {\r\n        console.assert(Number.isFinite(x));\r\n        console.assert(Number.isFinite(y));\r\n        const viewData = this.viewData;\r\n        const { center, gridSize } = viewData;\r\n        const canvas = this.canvas;\r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        const [cx, cy] = center;\r\n        const canvasWidth = width / 2;\r\n        const canvasHeight = height / 2;\r\n        const retX = Math.floor((x + cx) * gridSize + canvasWidth);\r\n        const retY = Math.floor((y + cy) * gridSize + canvasHeight);\r\n        console.assert(Number.isFinite(retX));\r\n        console.assert(Number.isFinite(retY));\r\n        return [retX, retY];\r\n    }\r\n    toGameCoor([vpX, vpY]) {\r\n        const { center, gridSize } = this.viewData;\r\n        const canvas = this.canvas;\r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        const canvasWidth2 = width / 2;\r\n        const canvasHeight2 = height / 2;\r\n        const [cx, cy] = center;\r\n        return [\r\n            (vpX - canvasWidth2) / gridSize - cx,\r\n            (vpY - canvasHeight2) / gridSize - cy,\r\n        ];\r\n    }\r\n    vpCenter() {\r\n        const viewData = this.viewData;\r\n        const { center } = viewData;\r\n        return this.toVpCoor(center);\r\n    }\r\n    isCircleInView(vpCoor, radius) {\r\n        // use a cheap check by treating the circle as a square\r\n        const twoR = 2 * radius;\r\n        const topLeft = subtract(vpCoor, [radius, radius]);\r\n        return this.isRectInView(topLeft, twoR, twoR);\r\n    }\r\n    isPointInView([vpX, vpY]) {\r\n        return vpX >= 0 && vpX <= this.canvas.width && vpY >= 0 && vpY <= this.canvas.height;\r\n    }\r\n    isSegmentIntersectSegment(p1, p2, q1, q2) {\r\n        const r = subtract(p2, p1);\r\n        console.assert(norm(r) > 0);\r\n        const s = subtract(q2, q1);\r\n        console.assert(norm(s) > 0);\r\n        const qMinusP = subtract(p1, q1);\r\n        const qMinusPCrossR = determinant(qMinusP, r);\r\n        const rCrossS = determinant(r, s);\r\n        if (qMinusPCrossR === 0 && rCrossS === 0) {\r\n            // collinear\r\n            //   t0 = (q − p) · r / (r · r)\r\n            //   t1 = (q + s − p) · r / (r · r) = t0 + s · r / (r · r)\r\n            const rSquared = dot(r, r);\r\n            const sDotr = dot(s, r);\r\n            const t0 = dot(qMinusP, r) / rSquared;\r\n            const t1 = t0 + sDotr / rSquared;\r\n            return (t0 >= 0 && t0 <= 1) || (t1 >= 0 && t1 <= 1); // collinear and overlapping if true\r\n        }\r\n        if (rCrossS === 0) { // implicitly qMinusPCrossR !== 0\r\n            return false; // parallel and non-overlapping\r\n        }\r\n        // t = (q − p) × s / (r × s)\r\n        const t = determinant(qMinusP, s) / rCrossS;\r\n        // u = (q − p) × r / (r × s)\r\n        const u = qMinusPCrossR / rCrossS;\r\n        return t >= 0 && t <= 1 && u >= 0 && u <= 1;\r\n    }\r\n    isSegmentInView(vp1, vp2) {\r\n        const canvas = this.canvas;\r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        return this.isSegmentIntersectSegment(vp1, vp2, [0, 0], [0, width]) ||\r\n            this.isSegmentIntersectSegment(vp1, vp2, [0, 0], [0, height]) ||\r\n            this.isSegmentIntersectSegment(vp1, vp2, [width, 0], [0, height]) ||\r\n            this.isSegmentIntersectSegment(vp1, vp2, [width, 0], [width, height]);\r\n        // return this.isPointInView(vpCoor1) || this.isPointInView(vpCoor2);\r\n    }\r\n    isRectInView(vpCoor, width, height) {\r\n        // https://stackoverflow.com/a/306332\r\n        const ax1 = 0;\r\n        const ay1 = 0;\r\n        const canvas = this.canvas;\r\n        const ax2 = canvas.width;\r\n        const ay2 = canvas.height;\r\n        const [bx1, by1] = vpCoor;\r\n        const bx2 = bx1 + width;\r\n        const by2 = by1 + height;\r\n        return ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1;\r\n    }\r\n    getOffsetFromTopLeft(e) {\r\n        const bb = e.target.getBoundingClientRect();\r\n        return [\r\n            e.center.x - bb.left,\r\n            e.center.y - bb.top,\r\n        ];\r\n    }\r\n    getOffsetFromCenter(e) {\r\n        const canvas = this.canvas;\r\n        return [\r\n            e.center.x - canvas.offsetLeft - canvas.width / 2,\r\n            e.center.y - canvas.offsetTop - canvas.height / 2,\r\n        ];\r\n    }\r\n    /**\r\n     * Returns an animation function. The animation function should be deregistered when it returns true.\r\n     */\r\n    panTo(vpOffset) {\r\n        const viewData = this.viewData;\r\n        const vpCenter = this.vpCenter();\r\n        const center = this.toGameCoor(vpCenter);\r\n        const vpCoor = add(vpOffset, vpCenter);\r\n        const to = this.toGameCoor(vpCoor);\r\n        const offset = subtract(to, center);\r\n        const dist = norm(offset);\r\n        let i = 0;\r\n        const numPans = 30;\r\n        const speed = dist / numPans;\r\n        return () => {\r\n            if (dist < 1 || ++i === numPans) {\r\n                return true;\r\n            }\r\n            const proj = project(offset, speed);\r\n            viewData.center = subtract(viewData.center, proj);\r\n            return false;\r\n        };\r\n    }\r\n    zoom(e, min = MIN_GRID_SIZE, max = MAX_GRID_SIZE) {\r\n        console.assert(min <= max);\r\n        const viewData = this.viewData;\r\n        const isZoomingIn = e.deltaY < 0;\r\n        const gridSize = viewData.gridSize;\r\n        const val = 1;\r\n        if (isZoomingIn) {\r\n            viewData.gridSize = Math.min(max, gridSize + val);\r\n        }\r\n        else {\r\n            viewData.gridSize = Math.max(min, gridSize - val);\r\n        }\r\n    }\r\n}\r\nCanvasOperator.planetVertexDist = get_planet_vertex_dist();\r\n//# sourceMappingURL=CanvasOperator.js.map","import * as Hammer from \"hammerjs\";\r\nimport { distance, subtract } from \"myalgo-ts\";\r\nimport { SpacecraftKind } from \"../../galaxy\";\r\nimport { CanvasOperator } from \"./CanvasOperator\";\r\nimport { BIG_GRID_FACTOR, MIN_SHOW_GRID_SIZE, TWO_PI } from \"./def\";\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class GalaxyView extends HTMLCanvasElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        this.ctx = this.getContext(\"2d\");\r\n        this.cachedGrid = document.createElement(\"canvas\");\r\n        this.shouldUpdateGrid = true;\r\n        this.shouldRedrawView = true;\r\n        this.draw = () => {\r\n            this.resizeCanvas();\r\n            if (this.updatePanAnimation) {\r\n                if (this.updatePanAnimation()) {\r\n                    this.updatePanAnimation = undefined;\r\n                }\r\n                this.shouldUpdateGrid = true;\r\n                this.shouldRedrawView = true;\r\n            }\r\n            if (this.shouldUpdateGrid) {\r\n                this.updateCachedGrid();\r\n            }\r\n            const canvas = this;\r\n            const ctx = this.ctx;\r\n            if (this.shouldRedrawView &&\r\n                canvas.width !== 0 && canvas.height !== 0) {\r\n                ctx.clearRect(0, 0, this.width, this.height);\r\n                ctx.drawImage(this.cachedGrid, 0, 0);\r\n                this.drawObjects();\r\n            }\r\n            this.shouldRedrawView = false;\r\n            this.shouldUpdateGrid = false;\r\n            this.frameRequestId = requestAnimationFrame(this.draw);\r\n        };\r\n        /** Return true if resized; false otherwise */\r\n        this.resizeCanvas = () => {\r\n            const canvas = this;\r\n            const width = canvas.clientWidth;\r\n            const height = canvas.clientHeight;\r\n            if (canvas.width !== width ||\r\n                canvas.height !== height) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                this.cachedGrid.width = width;\r\n                this.cachedGrid.height = height;\r\n                this.shouldUpdateGrid = true;\r\n                this.shouldRedrawView = true;\r\n            }\r\n        };\r\n        this.doubleClick = (e) => {\r\n            const vpOffset = this.getOffsetFromCenter(e);\r\n            this.panTo(vpOffset);\r\n        };\r\n        this.singleClick = (e) => {\r\n            const vpOffset = this.getOffsetFromTopLeft(e);\r\n            const [x, y] = this.operator.toGameCoor(vpOffset);\r\n            const db = this.db;\r\n            db.handleCoorSearch(x, y);\r\n        };\r\n        this.wheel = (e) => {\r\n            this.updatePanAnimation = undefined;\r\n            this.operator.zoom(e);\r\n            this.shouldUpdateGrid = true;\r\n            this.shouldRedrawView = true;\r\n        };\r\n        this.pan = (e) => {\r\n            this.panTo([e.deltaX, e.deltaY]);\r\n        };\r\n        console.assert(this.ctx !== undefined);\r\n        const canvas = this;\r\n        canvas.className = \"map\";\r\n        window.addEventListener(\"resize\", this.resizeCanvas, true);\r\n        const gesture = new Hammer.Manager(this);\r\n        const double = new Hammer.Tap({ event: \"doubletap\", taps: 2 });\r\n        const single = new Hammer.Tap({ event: \"singletap\" });\r\n        const pan = new Hammer.Pan().set({ direction: Hammer.DIRECTION_ALL });\r\n        gesture.add([\r\n            double,\r\n            single,\r\n            pan,\r\n        ]);\r\n        double.recognizeWith(single);\r\n        single.requireFailure(double);\r\n        // setup events\r\n        gesture.on(\"singletap\", this.singleClick);\r\n        gesture.on(\"doubletap\", this.doubleClick);\r\n        gesture.on(\"pan\", this.pan);\r\n        this.addEventListener(\"wheel\", this.wheel, { passive: true });\r\n        this.operator = new CanvasOperator(this, db.galaxyViewData);\r\n        this.draw();\r\n    }\r\n    update(flags) {\r\n        if (flags.has(0 /* Galaxy */)) {\r\n            this.shouldRedrawView = true;\r\n        }\r\n    }\r\n    suspend() {\r\n        if (this.frameRequestId === undefined) {\r\n            console.assert(false);\r\n            throw new Error(\"no need to suspend drawing\");\r\n        }\r\n        window.cancelAnimationFrame(this.frameRequestId);\r\n        this.frameRequestId = undefined;\r\n    }\r\n    resume() {\r\n        if (this.frameRequestId !== undefined) {\r\n            console.assert(false);\r\n            throw new Error(\"no need to resume drawing\");\r\n        }\r\n        this.draw();\r\n    }\r\n    getOffsetFromTopLeft(e) {\r\n        const bb = e.target.getBoundingClientRect();\r\n        return [\r\n            e.center.x - bb.left,\r\n            e.center.y - bb.top,\r\n        ];\r\n    }\r\n    getOffsetFromCenter(e) {\r\n        return [\r\n            e.center.x - this.width / 2,\r\n            e.center.y - this.height / 2,\r\n        ];\r\n    }\r\n    drawPlanet(name, coor, radius, centerCoor) {\r\n        const db = this.db;\r\n        const viewData = db.galaxyViewData;\r\n        const gridSize = viewData.gridSize;\r\n        const scaledRadius = radius * gridSize;\r\n        const ctx = this.ctx;\r\n        ctx.save();\r\n        const vpCoor = this.operator.toVpCoor(coor);\r\n        const [vpX, vpY] = vpCoor;\r\n        // draw orbit\r\n        console.assert(centerCoor !== undefined);\r\n        const cVpCoor = this.operator.toVpCoor(centerCoor);\r\n        const cRadius = distance(cVpCoor, vpCoor);\r\n        const [cVpX, cVpY] = cVpCoor;\r\n        if (this.isCircleInView(cVpCoor, cRadius)) {\r\n            ctx.beginPath();\r\n            ctx.arc(cVpX, cVpY, cRadius, 0, TWO_PI);\r\n            ctx.stroke();\r\n        }\r\n        // draw planets\r\n        if (this.isCircleInView(vpCoor, scaledRadius)) {\r\n            ctx.beginPath();\r\n            ctx.arc(vpX, vpY, scaledRadius, 0, TWO_PI);\r\n            ctx.fill();\r\n        }\r\n        // draw planet names\r\n        const metric = ctx.measureText(name);\r\n        const height = 20; // an estimate\r\n        const width = metric.width;\r\n        const tVpX = vpX;\r\n        const tVpY = vpY - scaledRadius - 5;\r\n        const testCoor = subtract([tVpX, tVpY], [width / 2, height / 2]);\r\n        if (this.isRectInView(testCoor, metric.width, height)) {\r\n            ctx.fillText(name, tVpX, tVpY);\r\n        }\r\n        ctx.restore();\r\n    }\r\n    isCircleInView(vpCoor, radius) {\r\n        // use a cheap check by treating the circle as a square\r\n        const twoR = 2 * radius;\r\n        const topLeft = subtract(vpCoor, [radius, radius]);\r\n        return this.isRectInView(topLeft, twoR, twoR);\r\n    }\r\n    isRectInView(vpCoor, width, height) {\r\n        // https://stackoverflow.com/a/306332\r\n        const ax1 = 0;\r\n        const ay1 = 0;\r\n        const ax2 = this.width;\r\n        const ay2 = this.height;\r\n        const [bx1, by1] = vpCoor;\r\n        const bx2 = bx1 + width;\r\n        const by2 = by1 + height;\r\n        return ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1;\r\n    }\r\n    drawStar(name, radiusGame, x, y) {\r\n        const db = this.db;\r\n        const viewData = db.galaxyViewData;\r\n        const gridSize = viewData.gridSize;\r\n        const ctx = this.ctx;\r\n        const [vpX, vpY] = this.operator.toVpCoor([x, y]);\r\n        const radius = Math.max(1, radiusGame * gridSize);\r\n        ctx.beginPath();\r\n        ctx.arc(vpX, vpY, radius, 0, TWO_PI);\r\n        ctx.fill();\r\n        const metric = ctx.measureText(name);\r\n        const height = 20; // an estimate\r\n        const width = metric.width;\r\n        const tVpX = vpX;\r\n        const tVpY = vpY - radius - 5;\r\n        const testCoor = subtract([tVpX, tVpY], [width / 2, height / 2]);\r\n        if (this.isRectInView(testCoor, metric.width, height)) {\r\n            ctx.fillText(name, tVpX, tVpY);\r\n        }\r\n    }\r\n    drawShip(radiusGame, x, y) {\r\n        const db = this.db;\r\n        const viewData = db.galaxyViewData;\r\n        const gridSize = viewData.gridSize;\r\n        const ctx = this.ctx;\r\n        const [vpX, vpY] = this.operator.toVpCoor([x, y]);\r\n        const radius = Math.max(1, radiusGame * gridSize);\r\n        if (radius < 1) {\r\n            return;\r\n        }\r\n        ctx.beginPath();\r\n        ctx.arc(vpX, vpY, radius, 0, TWO_PI);\r\n        ctx.fill();\r\n    }\r\n    drawObjects() {\r\n        const db = this.db;\r\n        const viewData = db.galaxyViewData;\r\n        const gridSize = viewData.gridSize;\r\n        // extract boundary and search it in the index\r\n        const [tlX, tlY] = this.operator.toGameCoor([0, 0]);\r\n        const [brX, brY] = this.operator.toGameCoor([this.width, this.height]);\r\n        const drawData = db.calDrawData(tlX, tlY, brX, brY, gridSize);\r\n        const ctx = this.ctx;\r\n        ctx.save();\r\n        // star\r\n        ctx.fillStyle = \"yellow\";\r\n        // star label\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        for (const { name, radius, x, y } of drawData.stars) {\r\n            this.drawStar(name, radius, x, y);\r\n        }\r\n        // orbit\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.setLineDash([5, 3]);\r\n        // planet\r\n        ctx.fillStyle = \"green\";\r\n        // planet label\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        for (const { name, radius, x, y, cx, cy } of drawData.planets) {\r\n            const coor = [x, y];\r\n            const centerCoor = [cx, cy];\r\n            this.drawPlanet(name, coor, radius, centerCoor);\r\n        }\r\n        for (const { kind, radius, x, y } of drawData.ships) {\r\n            console.log(\"{0} {1}\", kind, SpacecraftKind[kind]);\r\n            this.drawShip(radius, x, y);\r\n        }\r\n        ctx.restore();\r\n    }\r\n    updateCachedGrid() {\r\n        const canvas = this.cachedGrid;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) {\r\n            throw new Error(\"cannot create context\");\r\n        }\r\n        const db = this.db;\r\n        const viewData = db.galaxyViewData;\r\n        const gridSize = viewData.gridSize;\r\n        const center = viewData.center;\r\n        const gridColor = \"#0c0c0c\";\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.save();\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = gridColor;\r\n        ctx.translate(0.5, 0.5);\r\n        const [cx, cy] = center;\r\n        // truncate to the nearest integer (every lines on the grid lie on the integers)\r\n        const x = Math.floor(cx);\r\n        const y = Math.floor(cy);\r\n        const [vpX, vpY] = this.operator.toVpCoor([x, y]);\r\n        // draw small grid\r\n        ctx.beginPath();\r\n        if (gridSize >= MIN_SHOW_GRID_SIZE) {\r\n            // draw all vertical lines\r\n            const numVert = Math.ceil(this.width / gridSize);\r\n            let curVpX = vpX % gridSize;\r\n            for (let i = 0; i <= numVert; i++) {\r\n                ctx.moveTo(curVpX, 0);\r\n                ctx.lineTo(curVpX, canvas.height);\r\n                curVpX += gridSize;\r\n            }\r\n            // draw all horizontal lines\r\n            const numHori = Math.ceil(this.height / gridSize);\r\n            let curVpY = vpY % gridSize;\r\n            for (let i = 0; i <= numHori; i++) {\r\n                ctx.moveTo(0, curVpY);\r\n                ctx.lineTo(canvas.width, curVpY);\r\n                curVpY += gridSize;\r\n            }\r\n        }\r\n        ctx.stroke();\r\n        ctx.restore();\r\n        ctx.save();\r\n        ctx.translate(0.5, 0.5);\r\n        if (gridSize >= MIN_SHOW_GRID_SIZE) {\r\n            ctx.strokeStyle = \"#282828\";\r\n        }\r\n        else {\r\n            ctx.strokeStyle = gridColor;\r\n        }\r\n        {\r\n            const xBig = x - (x % BIG_GRID_FACTOR);\r\n            const yBig = y - (y % BIG_GRID_FACTOR);\r\n            const bigGridSize = BIG_GRID_FACTOR * gridSize;\r\n            const [vpXBig, vpYBig] = this.operator.toVpCoor([xBig, yBig]);\r\n            ctx.beginPath();\r\n            const numVert = Math.ceil(this.width / bigGridSize);\r\n            let curVpX = vpXBig % bigGridSize;\r\n            for (let i = 0; i <= numVert; i++) {\r\n                ctx.moveTo(curVpX, 0);\r\n                ctx.lineTo(curVpX, canvas.height);\r\n                curVpX += bigGridSize;\r\n            }\r\n            // draw all horizontal lines\r\n            const numHori = Math.ceil(this.height / bigGridSize);\r\n            let curVpY = vpYBig % bigGridSize;\r\n            for (let i = 0; i <= numHori; i++) {\r\n                ctx.moveTo(0, curVpY);\r\n                ctx.lineTo(canvas.width, curVpY);\r\n                curVpY += bigGridSize;\r\n            }\r\n            ctx.stroke();\r\n        }\r\n        ctx.restore();\r\n    }\r\n    panTo(vpOffset) {\r\n        this.updatePanAnimation = this.operator.panTo(vpOffset);\r\n    }\r\n}\r\ncustomElements.define(\"map-view\", GalaxyView, { extends: \"canvas\" });\r\n//# sourceMappingURL=GalaxyView.js.map","const TEMPLATE = document.getElementById(\"nationView\");\r\nconsole.assert(TEMPLATE !== null);\r\nexport class NationView extends HTMLElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n    }\r\n    update(_) {\r\n        //\r\n    }\r\n}\r\ncustomElements.define(\"nation-view\", NationView);\r\n//# sourceMappingURL=NationView.js.map","const TEMPLATE = document.getElementById(\"peopleView\");\r\nconsole.assert(TEMPLATE !== null);\r\nexport class PeopleView extends HTMLElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n    }\r\n    update(_) {\r\n        //\r\n    }\r\n}\r\ncustomElements.define(\"people-view\", PeopleView);\r\n//# sourceMappingURL=PeopleView.js.map","import { subtract } from \"myalgo-ts\";\r\nimport { Galaxy } from \"../../galaxy\";\r\nimport { memory } from \"../../galaxy_bg\";\r\nimport { CanvasOperator } from \"./CanvasOperator\";\r\nimport { MIN_GRID_SIZE, TWO_PI } from \"./def\";\r\nimport { clearChildren } from \"./helper\";\r\nconst TEMPLATE = document.getElementById(\"planetView\");\r\nconsole.assert(TEMPLATE !== null);\r\nfunction getColor(nationId) {\r\n    // https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n    const modulus = Math.pow(2, 31);\r\n    const a = 1103515245;\r\n    const c = 12345;\r\n    const mix = (a * nationId + c) % modulus;\r\n    // https://stackoverflow.com/a/1152054\r\n    return \"#\" + (0x1000000 + mix * 0xffffff).toString(16).substr(1, 6);\r\n}\r\nexport class PlanetView extends HTMLElement {\r\n    constructor(db, planetId) {\r\n        super();\r\n        this.db = db;\r\n        this.planetId = planetId;\r\n        this.planetViewData = {\r\n            center: [0, 0],\r\n            gridSize: MIN_GRID_SIZE,\r\n        };\r\n        this.shouldRedrawView = true;\r\n        this.planetDim = this.db.galaxy.cal_planet_dim(this.planetId);\r\n        this.doubleClick = (e) => {\r\n            const vpOffset = this.operator.getOffsetFromCenter(e);\r\n            this.panTo(vpOffset);\r\n        };\r\n        this.singleClick = (e) => {\r\n            const vpOffset = this.operator.getOffsetFromTopLeft(e);\r\n            const [x, y] = this.operator.toGameCoor(vpOffset);\r\n            // TODO\r\n            const str = this.db.galaxy.cal_planet_click(this.planetId, x, y);\r\n            console.log(str + \" \" + x + \" \" + y);\r\n        };\r\n        this.resizeCanvas = () => {\r\n            const canvas = this.canvas;\r\n            const width = 400;\r\n            const height = 400;\r\n            this.canvas.style.height = height.toString();\r\n            this.canvas.style.width = width.toString();\r\n            if (canvas.width !== width ||\r\n                canvas.height !== height) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                this.shouldRedrawView = true;\r\n            }\r\n        };\r\n        this.draw = () => {\r\n            this.resizeCanvas();\r\n            if (this.updatePanAnimation) {\r\n                if (this.updatePanAnimation()) {\r\n                    this.updatePanAnimation = undefined;\r\n                }\r\n                this.shouldRedrawView = true;\r\n            }\r\n            if (this.shouldRedrawView) {\r\n                // note: need to copy the data because memory may invalidate upon calling (any wasm object's) free()\r\n                const points = this.db.getPlanetPoints(this.planetId);\r\n                const points2 = [];\r\n                for (let i = 0; i < points.length; i += 2) {\r\n                    const x = points[i];\r\n                    const y = points[i + 1];\r\n                    const gameCoor = [x, y];\r\n                    const vpCoor = this.operator.toVpCoor(gameCoor);\r\n                    points2.push({ gameCoor, vpCoor });\r\n                }\r\n                const colonized = this.getColonizedMap();\r\n                this.drawMap(points2, colonized);\r\n            }\r\n            this.shouldRedrawView = false;\r\n            requestAnimationFrame(this.draw);\r\n        };\r\n        this.drawMap = (points, colonized) => {\r\n            const ctx = this.ctx;\r\n            const db = this.db;\r\n            const galaxy = db.galaxy;\r\n            const normalizedCityRadiusLimit = PlanetView.cityRadiusLimit * this.planetViewData.gridSize;\r\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n            // draw detailed cities, if zoomed enough\r\n            points.forEach(({ gameCoor: [cityX, cityY], vpCoor: vpCity }, vertexIdx) => {\r\n                if (colonized[vertexIdx] < 0) {\r\n                    return;\r\n                }\r\n                if (!this.operator.isCircleInView(vpCity, normalizedCityRadiusLimit)) {\r\n                    return;\r\n                }\r\n                const baseStructureSize = normalizedCityRadiusLimit / 50;\r\n                // draw fancy detailed city (when zoomed enough)\r\n                if (baseStructureSize >= 1) {\r\n                    const graph = this.db.galaxy.cal_city_graph(this.planetId, vertexIdx);\r\n                    const numStructures = graph.num_structures;\r\n                    if (numStructures > 0) {\r\n                        const detailCityPoints = new Float32Array(memory.buffer, graph.get_points(), 2 * numStructures);\r\n                        const dims = new Uint8Array(memory.buffer, graph.get_dims(), 2 * numStructures);\r\n                        const roads = new Uint32Array(memory.buffer, graph.get_roads(), (numStructures - 1) * 2); // n-1 edges in a tree with n vertices\r\n                        ctx.save();\r\n                        ctx.beginPath();\r\n                        ctx.strokeStyle = \"gray\";\r\n                        ctx.fillStyle = \"black\";\r\n                        ctx.lineWidth = 1;\r\n                        for (let j = 0; j < roads.length; j += 2) {\r\n                            console.assert(roads[j] !== roads[j + 1]);\r\n                            const uIdx = 2 * roads[j];\r\n                            const vIdx = 2 * roads[j + 1];\r\n                            console.assert(uIdx !== vIdx);\r\n                            const x0 = detailCityPoints[uIdx];\r\n                            const y0 = detailCityPoints[uIdx + 1];\r\n                            const x1 = detailCityPoints[vIdx];\r\n                            const y1 = detailCityPoints[vIdx + 1];\r\n                            console.assert(Number.isFinite(x0));\r\n                            console.assert(Number.isFinite(x1));\r\n                            console.assert(Number.isFinite(y0));\r\n                            console.assert(Number.isFinite(y1));\r\n                            console.assert(x0 !== x1 && y0 !== y1);\r\n                            const [vpX0, vpY0] = this.operator.toVpCoor([cityX + x0, cityY + y0]);\r\n                            const [vpX1, vpY1] = this.operator.toVpCoor([cityX + x1, cityY + y1]);\r\n                            if ((vpX0 === vpX1 && vpY0 === vpY1)) { // segment too short\r\n                                continue;\r\n                            }\r\n                            ctx.moveTo(vpX0, vpY0);\r\n                            ctx.lineTo(vpX1, vpY1);\r\n                        }\r\n                        ctx.stroke();\r\n                        for (let j = 0; j < detailCityPoints.length; j += 2) {\r\n                            const x = detailCityPoints[j];\r\n                            const y = detailCityPoints[j + 1];\r\n                            const w = Math.max(1, dims[j] * baseStructureSize);\r\n                            const h = Math.max(1, dims[j + 1] * baseStructureSize);\r\n                            const [vpX, vpY] = this.operator.toVpCoor([cityX + x, cityY + y]);\r\n                            if (!this.operator.isRectInView([vpX, vpY], w, h)) {\r\n                                continue;\r\n                            }\r\n                            ctx.rect(vpX, vpY, w, h);\r\n                        }\r\n                        ctx.fill();\r\n                        ctx.restore();\r\n                    }\r\n                    graph.free();\r\n                }\r\n            });\r\n            ctx.save();\r\n            // edges\r\n            const edges = db.getPlanetEdges(this.planetId);\r\n            ctx.save();\r\n            {\r\n                ctx.beginPath();\r\n                ctx.strokeStyle = \"gray\";\r\n                ctx.fillStyle = \"white\";\r\n                ctx.lineWidth = 2;\r\n                for (let i = 0; i < edges.length; i += 2) {\r\n                    const idx0 = edges[i];\r\n                    const idx1 = edges[i + 1];\r\n                    const [vpX0, vpY0] = points[idx0].vpCoor;\r\n                    const [vpX1, vpY1] = points[idx1].vpCoor;\r\n                    ctx.moveTo(vpX0, vpY0);\r\n                    ctx.lineTo(vpX1, vpY1);\r\n                }\r\n                ctx.stroke();\r\n            }\r\n            ctx.restore();\r\n            const ownNationId = 0; // TODO\r\n            // colonized vertices (own nation)\r\n            ctx.save();\r\n            {\r\n                ctx.fillStyle = \"green\";\r\n                ctx.lineWidth = 5;\r\n                points.forEach(({ vpCoor }, vertexIdx) => {\r\n                    const targetNationId = colonized[vertexIdx];\r\n                    if (targetNationId !== ownNationId) {\r\n                        return;\r\n                    }\r\n                    const [vpX, vpY] = vpCoor;\r\n                    const radius = 10;\r\n                    if (!this.operator.isCircleInView(vpCoor, radius)) {\r\n                        return;\r\n                    }\r\n                    ctx.beginPath();\r\n                    ctx.strokeStyle = getColor(targetNationId);\r\n                    ctx.arc(vpX, vpY, radius, 0, TWO_PI);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                    ctx.fill();\r\n                });\r\n            }\r\n            ctx.restore();\r\n            // colonized vertices (neutral)\r\n            ctx.save();\r\n            {\r\n                ctx.fillStyle = \"yellow\";\r\n                ctx.lineWidth = 5;\r\n                points.forEach(({ vpCoor }, vertexIdx) => {\r\n                    const targetNationId = colonized[vertexIdx];\r\n                    if (targetNationId < 0 || targetNationId === ownNationId || galaxy.is_at_war_with(ownNationId, targetNationId)) {\r\n                        return;\r\n                    }\r\n                    const [vpX, vpY] = vpCoor;\r\n                    const radius = 10;\r\n                    if (!this.operator.isCircleInView(vpCoor, radius)) {\r\n                        return;\r\n                    }\r\n                    ctx.beginPath();\r\n                    ctx.strokeStyle = getColor(targetNationId);\r\n                    ctx.arc(vpX, vpY, radius, 0, TWO_PI);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                    ctx.fill();\r\n                });\r\n            }\r\n            ctx.restore();\r\n            // colonized vertices (hostile)\r\n            ctx.save();\r\n            {\r\n                ctx.fillStyle = \"red\";\r\n                ctx.lineWidth = 5;\r\n                ctx.beginPath();\r\n                points.forEach(({ vpCoor }, vertexIdx) => {\r\n                    const targetNationId = colonized[vertexIdx];\r\n                    if (targetNationId < 0 || targetNationId === ownNationId || !galaxy.is_at_war_with(ownNationId, targetNationId)) {\r\n                        return;\r\n                    }\r\n                    const [vpX, vpY] = vpCoor;\r\n                    const radius = 10;\r\n                    if (!this.operator.isCircleInView(vpCoor, radius)) {\r\n                        return;\r\n                    }\r\n                    ctx.beginPath();\r\n                    ctx.strokeStyle = getColor(targetNationId);\r\n                    ctx.arc(vpX, vpY, radius, 0, TWO_PI);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                    ctx.fill();\r\n                });\r\n            }\r\n            ctx.restore();\r\n            // uncolonized vertices\r\n            ctx.save();\r\n            {\r\n                ctx.fillStyle = \"white\";\r\n                ctx.beginPath();\r\n                points.forEach(({ vpCoor }, vertexIdx) => {\r\n                    if (colonized[vertexIdx] >= 0) {\r\n                        return;\r\n                    }\r\n                    const [vpX, vpY] = vpCoor;\r\n                    const radius = 10;\r\n                    if (!this.operator.isCircleInView(vpCoor, radius)) {\r\n                        return;\r\n                    }\r\n                    ctx.arc(vpX, vpY, radius, 0, TWO_PI);\r\n                    ctx.closePath();\r\n                });\r\n                ctx.fill();\r\n            }\r\n            ctx.restore();\r\n            // draw units\r\n            const soldierWidth = 5;\r\n            const soldierHeight = 10;\r\n            ctx.save();\r\n            {\r\n                ctx.beginPath();\r\n                ctx.fillStyle = \"purple\";\r\n                points.map(({ vpCoor }, i) => {\r\n                    if (!galaxy.has_division(this.planetId, i)) {\r\n                        return;\r\n                    }\r\n                    const [vpX, vpY] = vpCoor;\r\n                    const vpFinal = [vpX, vpY - 10];\r\n                    const [vpXFinal, vpYFinal] = vpFinal;\r\n                    if (!this.operator.isRectInView(vpFinal, soldierWidth, soldierHeight)) {\r\n                        return;\r\n                    }\r\n                    ctx.rect(vpXFinal, vpYFinal, soldierWidth, soldierHeight);\r\n                });\r\n                ctx.fill();\r\n            }\r\n            ctx.restore();\r\n            ctx.beginPath();\r\n            ctx.textAlign = \"center\";\r\n            points.map(({ vpCoor }, i) => {\r\n                const text = `${i}(${db.galaxy.get_city_idx(this.planetId, i)})`;\r\n                const metric = ctx.measureText(text);\r\n                const height = 20; // an estimate\r\n                const width = metric.width;\r\n                const [vpX, vpY] = vpCoor;\r\n                const tVpX = vpX;\r\n                const tVpY = vpY - 8;\r\n                const testCoor = subtract([tVpX, tVpY], [width / 2, height / 2]);\r\n                if (this.operator.isRectInView(testCoor, metric.width, height)) {\r\n                    ctx.fillText(text, tVpX, tVpY);\r\n                }\r\n            });\r\n            ctx.restore();\r\n        };\r\n        this.pan = (e) => {\r\n            this.panTo([e.deltaX, e.deltaY]);\r\n        };\r\n        this.wheel = (e) => {\r\n            e.preventDefault();\r\n            this.updatePanAnimation = undefined;\r\n            this.operator.zoom(e);\r\n            this.shouldRedrawView = true;\r\n        };\r\n        this.setClickTileIdx = (idx) => () => {\r\n            this.tileId = idx;\r\n        };\r\n        console.assert(this.planetDim > 0);\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n        this.canvas = shadowRoot.querySelector(\".map\");\r\n        console.assert(this.canvas !== null);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.operator = new CanvasOperator(this.canvas, this.planetViewData);\r\n        this.planetName = shadowRoot.querySelector(\".name\");\r\n        console.assert(this.canvas !== null);\r\n        this.tile = shadowRoot.querySelector(\".tile\");\r\n        console.assert(this.tile !== null);\r\n        this.polOwner = shadowRoot.querySelector(\".polOwner\");\r\n        console.assert(this.polOwner !== null);\r\n        this.container = shadowRoot.querySelector(\".container\");\r\n        console.assert(this.container !== null);\r\n        const gesture = new Hammer.Manager(this.canvas);\r\n        const double = new Hammer.Tap({ event: \"doubletap\", taps: 2 });\r\n        const single = new Hammer.Tap({ event: \"singletap\" });\r\n        const pan = new Hammer.Pan().set({ direction: Hammer.DIRECTION_ALL });\r\n        gesture.add([\r\n            double,\r\n            single,\r\n            pan,\r\n        ]);\r\n        double.recognizeWith(single);\r\n        single.requireFailure(double);\r\n        // setup events\r\n        gesture.on(\"singletap\", this.singleClick);\r\n        gesture.on(\"doubletap\", this.doubleClick);\r\n        gesture.on(\"pan\", this.pan);\r\n        this.canvas.addEventListener(\"wheel\", this.wheel);\r\n        this.layout();\r\n        this.draw();\r\n    }\r\n    update(flags) {\r\n        this.shouldRedrawView = true;\r\n    }\r\n    getColonizedMap() {\r\n        return this.db.galaxy.get_colonized_map(this.planetId);\r\n    }\r\n    panTo(vpOffset) {\r\n        this.updatePanAnimation = this.operator.panTo(vpOffset);\r\n    }\r\n    /*\r\n    private updateColonyView(colonyId: IColonyId | null, flags: Set<ChannelKind>) {\r\n\r\n        const db = this.db;\r\n\r\n        if (colonyId !== null) {\r\n            if (this.colonyView === undefined) {\r\n                this.colonyView = new ColonyView(db, colonyId);\r\n                this.container.appendChild(this.colonyView);\r\n            } else if (colonyId !== this.colonyView.colonyId) {\r\n                this.colonyView.remove();\r\n                this.colonyView = new ColonyView(db, colonyId);\r\n                this.container.appendChild(this.colonyView);\r\n            }\r\n        }\r\n        if (this.colonyView !== undefined) {\r\n            this.colonyView.update(flags);\r\n        }\r\n    }\r\n    */\r\n    layout() {\r\n        clearChildren(this.canvas);\r\n        const planetId = this.planetId;\r\n        const db = this.db;\r\n        //  const info = db.getPlanetInfo(this.planetId);\r\n        //   setIfDiff(this.planetName, info.name);\r\n    }\r\n}\r\nPlanetView.cityRadiusLimit = Galaxy.get_city_radius_limit();\r\ncustomElements.define(\"planet-view\", PlanetView);\r\n//# sourceMappingURL=PlanetView.js.map","const TEMPLATE = document.getElementById(\"playerView\");\r\nconsole.assert(TEMPLATE !== null);\r\nexport class PlayerView extends HTMLElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n    }\r\n    update(_) {\r\n        //\r\n    }\r\n}\r\ncustomElements.define(\"player-view\", PlayerView);\r\n//# sourceMappingURL=PlayerView.js.map","import { clearChildren } from \"./helper\";\r\nconst TEMPLATE = document.getElementById(\"searchView\");\r\nconsole.assert(TEMPLATE !== null);\r\nconst RESULT_ITEM = document.getElementById(\"resultItem\");\r\nconsole.assert(RESULT_ITEM !== null);\r\nexport class SearchView extends HTMLElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        this.handleKeyup = () => {\r\n            const db = this.db;\r\n            const term = this.searchTerm.value;\r\n            db.searchName = term;\r\n        };\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n        this.searchTerm = shadowRoot.querySelector(\".searchTerm\");\r\n        console.assert(this.searchTerm !== null);\r\n        this.searchTerm.onkeyup = this.handleKeyup;\r\n        this.searchResult = shadowRoot.querySelector(\".result\");\r\n        console.assert(this.searchResult !== null);\r\n        this.refreshResults();\r\n    }\r\n    update(flags) {\r\n        const db = this.db;\r\n        if (flags.has(3 /* NameSearchUpdate */)) {\r\n            this.refreshResults();\r\n        }\r\n    }\r\n    refreshResults() {\r\n        clearChildren(this.searchResult);\r\n        const db = this.db;\r\n        const fragment = document.createDocumentFragment();\r\n        for (const result of db.searchNameResult) {\r\n            const inner = document.createDocumentFragment();\r\n            inner.appendChild(RESULT_ITEM.content.cloneNode(true));\r\n            const resultItem = inner.querySelector(\".resultItem\");\r\n            console.assert(resultItem !== null);\r\n            const nameField = inner.querySelector(\".name\");\r\n            console.assert(nameField !== null);\r\n            nameField.textContent = result.name;\r\n            const id = result.id;\r\n            if (id.Planet !== undefined) {\r\n                const planetId = id;\r\n                resultItem.onclick = () => db.switchPlanetTab(planetId);\r\n            }\r\n            else if (id.Star !== undefined) {\r\n                // TODO\r\n            }\r\n            else if (id.Nation !== undefined) {\r\n                // TODO\r\n            }\r\n            else if (id.Corporation !== undefined) {\r\n                // TODO\r\n            }\r\n            else {\r\n                throw new Error(\"not handled\");\r\n            }\r\n            fragment.appendChild(inner);\r\n        }\r\n        this.searchResult.appendChild(fragment);\r\n    }\r\n}\r\ncustomElements.define(\"search-view\", SearchView);\r\n//# sourceMappingURL=SearchView.js.map","import { clearChildren, setIfDiff } from \"./helper\";\r\nconst TEMPLATE = document.getElementById(\"stationView\");\r\nconsole.assert(TEMPLATE !== null);\r\nexport class StationView extends HTMLElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n        this.tbody = shadowRoot.querySelector(\".map\");\r\n        console.assert(this.tbody !== null);\r\n        this.name = shadowRoot.querySelector(\".name\");\r\n        console.assert(this.tbody !== null);\r\n        this.layout();\r\n    }\r\n    update(flags) {\r\n        if (this.updateHandler) {\r\n            this.updateHandler(flags);\r\n        }\r\n    }\r\n    layout() {\r\n        clearChildren(this.tbody);\r\n        setIfDiff(this.name, \"Station 1\");\r\n        const width = 2;\r\n        const height = 1;\r\n        const fragment = document.createDocumentFragment();\r\n        for (let h = 0; h < height; h++) {\r\n            const row = document.createElement(\"tr\");\r\n            fragment.appendChild(row);\r\n            for (let w = 0; w < width; w++) {\r\n                const data = document.createElement(\"td\");\r\n                row.appendChild(data);\r\n                data.textContent = \"A\";\r\n            }\r\n        }\r\n        this.tbody.appendChild(fragment);\r\n    }\r\n}\r\ncustomElements.define(\"station-view\", StationView);\r\n//# sourceMappingURL=StationView.js.map","import { GalaxyView } from \"./GalaxyView\";\r\nimport { clearChildren } from \"./helper\";\r\nimport { NationView } from \"./NationView\";\r\nimport { PeopleView } from \"./PeopleView\";\r\nimport { PlanetView } from \"./PlanetView\";\r\nimport { PlayerView } from \"./PlayerView\";\r\nimport { SearchView } from \"./SearchView\";\r\nimport { StationView } from \"./StationView\";\r\nconst TEMPLATE = document.getElementById(\"switchView\");\r\nconsole.assert(TEMPLATE !== null);\r\nexport class SwitchView extends HTMLElement {\r\n    constructor(db) {\r\n        super();\r\n        this.db = db;\r\n        this.tabChildren = new Map();\r\n        this.switch = (data) => {\r\n            const db = this.db;\r\n            if (this.curView === undefined) {\r\n                this.switchHelper(this.createGalaxyView());\r\n            }\r\n            else {\r\n                switch (data.kind) {\r\n                    case 0 /* Galaxy */:\r\n                        if (this.curView.kind !== data.kind) {\r\n                            this.switchHelper(this.createGalaxyView());\r\n                        }\r\n                        break;\r\n                    case 1 /* Planet */:\r\n                        // cleanup\r\n                        switch (this.curView.kind) {\r\n                            case 1 /* Planet */:\r\n                                if (this.curView.planetId === data.planetId) {\r\n                                    return; // no need to switch\r\n                                }\r\n                                break;\r\n                            case 0 /* Galaxy */:\r\n                                this.curView.view.suspend();\r\n                                break;\r\n                        }\r\n                        this.switchHelper(Object.assign({}, data, { view: new PlanetView(db, data.planetId.Planet) }));\r\n                        break;\r\n                    case 2 /* Search */:\r\n                        // cleanup\r\n                        switch (this.curView.kind) {\r\n                            case 0 /* Galaxy */:\r\n                                this.curView.view.suspend();\r\n                                break;\r\n                            case 2 /* Search */:\r\n                                return; // no need to switch\r\n                        }\r\n                        this.switchHelper(Object.assign({}, data, { view: new SearchView(db) }));\r\n                        break;\r\n                    case 3 /* Player */:\r\n                        // cleanup\r\n                        switch (this.curView.kind) {\r\n                            case 0 /* Galaxy */:\r\n                                this.curView.view.suspend();\r\n                                break;\r\n                            case 3 /* Player */:\r\n                                return; // no need to switch\r\n                        }\r\n                        this.switchHelper(Object.assign({}, data, { view: new PlayerView(db) }));\r\n                        break;\r\n                    case 4 /* Nation */:\r\n                        // cleanup\r\n                        switch (this.curView.kind) {\r\n                            case 0 /* Galaxy */:\r\n                                this.curView.view.suspend();\r\n                                break;\r\n                            case 4 /* Nation */:\r\n                                return; // no need to switch\r\n                        }\r\n                        this.switchHelper(Object.assign({}, data, { view: new NationView(db) }));\r\n                        break;\r\n                    case 5 /* Station */:\r\n                        // cleanup\r\n                        switch (this.curView.kind) {\r\n                            case 0 /* Galaxy */:\r\n                                this.curView.view.suspend();\r\n                                break;\r\n                            case 5 /* Station */:\r\n                                return; // no need to switch\r\n                        }\r\n                        this.switchHelper(Object.assign({}, data, { view: new StationView(db) }));\r\n                        break;\r\n                    case 6 /* People */:\r\n                        // cleanup\r\n                        switch (this.curView.kind) {\r\n                            case 0 /* Galaxy */:\r\n                                this.curView.view.suspend();\r\n                                break;\r\n                            case 6 /* People */:\r\n                                return; // no need to switch\r\n                        }\r\n                        this.switchHelper(Object.assign({}, data, { view: new PeopleView(db) }));\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"not handled\");\r\n                }\r\n            }\r\n            db.moveTabToFront(data.tabId);\r\n            this.updateTabs();\r\n            const curTabId = db.tabId;\r\n            for (const [tabId, element] of this.tabChildren) {\r\n                if (tabId === curTabId) {\r\n                    element.classList.add(\"selected\");\r\n                }\r\n                else {\r\n                    element.classList.remove(\"selected\");\r\n                }\r\n            }\r\n        };\r\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\r\n        shadowRoot.appendChild(TEMPLATE.content.cloneNode(true));\r\n        this.tabs = shadowRoot.querySelector(\".tabs\");\r\n        console.assert(this.tabs !== null);\r\n        this.container = shadowRoot.querySelector(\".container\");\r\n        console.assert(this.container !== null);\r\n        const tabData = db.tabs[0];\r\n        console.assert(tabData.kind === 0 /* Galaxy */);\r\n        this.switch(tabData);\r\n    }\r\n    update(flags) {\r\n        if (flags.has(1 /* Tabs */)) {\r\n            this.updateTabs();\r\n        }\r\n        if (flags.has(2 /* SwitchTab */)) {\r\n            const db = this.db;\r\n            if (db.tabId !== this.curView.tabId) {\r\n                const tabData = db.tabs.find((x) => x.tabId === db.tabId);\r\n                console.assert(tabData !== undefined);\r\n                this.switch(tabData);\r\n            }\r\n        }\r\n        this.curView.view.update(flags);\r\n    }\r\n    updateTabs() {\r\n        const db = this.db;\r\n        clearChildren(this.tabs);\r\n        const oldTabChildren = this.tabChildren;\r\n        this.tabChildren = new Map();\r\n        for (const data of this.db.tabs) {\r\n            // try to get or create the tab\r\n            let tab = oldTabChildren.get(data.tabId);\r\n            if (tab) {\r\n                this.tabChildren.set(data.tabId, tab);\r\n            }\r\n            else {\r\n                tab = document.createElement(\"div\");\r\n                tab.onclick = () => this.db.tabId = data.tabId;\r\n                switch (data.kind) {\r\n                    case 0 /* Galaxy */:\r\n                        tab.textContent = \"Galaxy\";\r\n                        break;\r\n                    case 1 /* Planet */:\r\n                        {\r\n                            const planetName = db.getPlanetName(data.planetId);\r\n                            tab.textContent = planetName;\r\n                        }\r\n                        break;\r\n                    case 2 /* Search */:\r\n                        tab.textContent = \"Search\";\r\n                        break;\r\n                    case 3 /* Player */:\r\n                        tab.textContent = \"Player\";\r\n                        break;\r\n                    case 4 /* Nation */:\r\n                        tab.textContent = \"Nation\";\r\n                        break;\r\n                    case 5 /* Station */:\r\n                        tab.textContent = \"Station\";\r\n                        break;\r\n                    case 6 /* People */:\r\n                        tab.textContent = \"People\";\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"not handled\");\r\n                }\r\n                this.tabChildren.set(data.tabId, tab);\r\n            }\r\n            this.tabs.appendChild(tab);\r\n        }\r\n    }\r\n    switchHelper(view) {\r\n        clearChildren(this.container);\r\n        this.curView = view;\r\n        this.container.appendChild(view.view);\r\n    }\r\n    createGalaxyView() {\r\n        const db = this.db;\r\n        console.assert(db.tabs.length > 0 && db.tabs[0].kind === 0 /* Galaxy */);\r\n        const tabId = db.tabs[0].tabId;\r\n        return {\r\n            kind: 0 /* Galaxy */,\r\n            tabId,\r\n            view: new GalaxyView(this.db),\r\n        };\r\n    }\r\n}\r\ncustomElements.define(\"switch-view\", SwitchView);\r\n//# sourceMappingURL=SwitchView.js.map","export const MAX_GRID_SIZE = 40;\r\nexport const MIN_GRID_SIZE = 1;\r\nexport const MIN_SHOW_GRID_SIZE = 10;\r\nexport const BIG_GRID_FACTOR = 40;\r\nexport const TWO_PI = 2 * Math.PI;\r\n//# sourceMappingURL=def.js.map","export function setIfDiff(element, val) {\r\n    const str = val.toString();\r\n    if (element.textContent !== str) {\r\n        element.textContent = str;\r\n    }\r\n}\r\nexport function clearChildren(element) {\r\n    while (element.lastChild) {\r\n        element.removeChild(element.lastChild);\r\n    }\r\n}\r\nexport function batchChildren(it) {\r\n    const fragment = document.createDocumentFragment();\r\n    for (const e of it) {\r\n        fragment.appendChild(e);\r\n    }\r\n    return fragment;\r\n}\r\n//# sourceMappingURL=helper.js.map","/* tslint:disable */\nimport * as wasm from './galaxy_bg';\n\nlet cachegetUint16Memory = null;\nfunction getUint16Memory() {\n    if (cachegetUint16Memory === null || cachegetUint16Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint16Memory = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachegetUint16Memory;\n}\n\nfunction passArray16ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 2);\n    getUint16Memory().set(arg, ptr / 2);\n    return [ptr, arg.length];\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction getArrayU32FromWasm(ptr, len) {\n    return getUint32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nconst stack = [];\n\nconst slab = [{ obj: undefined }, { obj: null }, { obj: true }, { obj: false }];\n\nfunction getObject(idx) {\n    if ((idx & 1) === 1) {\n        return stack[idx >> 1];\n    } else {\n        const val = slab[idx >> 1];\n\n        return val.obj;\n\n    }\n}\n\nlet slab_next = slab.length;\n\nfunction dropRef(idx) {\n\n    idx = idx >> 1;\n    if (idx < 4) return;\n    let obj = slab[idx];\n\n    obj.cnt -= 1;\n    if (obj.cnt > 0) return;\n\n    // If we hit 0 then free up our space in the slab\n    slab[idx] = slab_next;\n    slab_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropRef(idx);\n    return ret;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? require('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    return [ptr, buf.length];\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nfunction getArrayI32FromWasm(ptr, len) {\n    return getInt32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction addHeapObject(obj) {\n    if (slab_next === slab.length) slab.push(slab.length + 1);\n    const idx = slab_next;\n    const next = slab[idx];\n\n    slab_next = next;\n\n    slab[idx] = { obj, cnt: 1 };\n    return idx << 1;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? require('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nconst __wbg_log_c6333848a0d98630_target = console.log;\n\nexport function __wbg_log_c6333848a0d98630(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    __wbg_log_c6333848a0d98630_target(varg0);\n}\n/**\n* @returns {number}\n*/\nexport function get_planet_vertex_dist() {\n    return wasm.get_planet_vertex_dist();\n}\n\n/**\n* @returns {number}\n*/\nexport function get_ticks_per_second() {\n    return wasm.get_ticks_per_second();\n}\n\n/**\n*/\nexport const SquadKind = Object.freeze({ Infantry:0,Robot:1,Tank:2,Wagon:3,Colonist:4, });\n/**\n*/\nexport const CombatStyle = Object.freeze({ Push:0,Fill:1,Overrun:2,Avoid:3, });\n/**\n*/\nexport const Direction = Object.freeze({ North:0,South:1,East:2,West:3, });\n/**\n*/\nexport const AccessRight = Object.freeze({ None:0,Civilian:1,Military:2, });\n/**\n*/\nexport const Product = Object.freeze({ Crop:0,Metal:1,Gem:2,Fuel:3,Concrete:4,Supply:5,Alloy:6,Fiber:7,Chemical:8,Circuit:9,Food:10,Apparel:11,Medicine:12,Computer:13,Accessory:14,Furniture:15,Vehicle:16,Machine:17,Tool:18,Hull:19,Engine:20,Weapon:21,Shield:22,Armor:23,Countermeasure:24,Rifle:25,Uniform:26,Saber:27,Exoskeleton:28, });\n/**\n*/\nexport const SpacecraftKind = Object.freeze({ Freighter:0,Fighter:1,Bomber:2,Trooper:3,Destroyer:4,BombardCraft:5,Battleship:6,Station:7,Fortress:8,Carrier:9,Shipyard:10,Constructor:11, });\n/**\n* @returns {void}\n*/\nexport function bootstrap() {\n    return wasm.bootstrap();\n}\n\nconst __wbg_error_cc95a3d302735ca3_target = console.error;\n\nexport function __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    __wbg_error_cc95a3d302735ca3_target(varg0);\n}\n\nconst __wbg_random_fabf73e8a709437c_target = Math.random;\n\nexport function __wbg_random_fabf73e8a709437c() {\n    return __wbg_random_fabf73e8a709437c_target();\n}\n\nfunction freeNationId(ptr) {\n\n    wasm.__wbg_nationid_free(ptr);\n}\n/**\n*/\nexport class NationId {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeNationId(ptr);\n    }\n}\n\nfunction freeNeighbourNations(ptr) {\n\n    wasm.__wbg_neighbournations_free(ptr);\n}\n/**\n*/\nexport class NeighbourNations {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeNeighbourNations(ptr);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    get_nation_ids() {\n        const retptr = globalArgumentPtr();\n        wasm.neighbournations_get_nation_ids(retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU32FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 4);\n        return realRet;\n\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    get_num_border_tiles(arg0) {\n        return wasm.neighbournations_get_num_border_tiles(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {Uint32Array}\n    */\n    get_border_tiles(arg0) {\n        const retptr = globalArgumentPtr();\n        wasm.neighbournations_get_border_tiles(retptr, this.ptr, arg0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU32FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 4);\n        return realRet;\n\n    }\n}\n\nfunction freeSoldiers(ptr) {\n\n    wasm.__wbg_soldiers_free(ptr);\n}\n/**\n*/\nexport class Soldiers {\n    /**\n    * @returns {number}\n    */\n    get troops() {\n        return wasm.__wbg_get_soldiers_troops(this.ptr);\n    }\n    set troops(arg0) {\n        return wasm.__wbg_set_soldiers_troops(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get rifle() {\n        return wasm.__wbg_get_soldiers_rifle(this.ptr);\n    }\n    set rifle(arg0) {\n        return wasm.__wbg_set_soldiers_rifle(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get uniform() {\n        return wasm.__wbg_get_soldiers_uniform(this.ptr);\n    }\n    set uniform(arg0) {\n        return wasm.__wbg_set_soldiers_uniform(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get saber() {\n        return wasm.__wbg_get_soldiers_saber(this.ptr);\n    }\n    set saber(arg0) {\n        return wasm.__wbg_set_soldiers_saber(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get exoskeleton() {\n        return wasm.__wbg_get_soldiers_exoskeleton(this.ptr);\n    }\n    set exoskeleton(arg0) {\n        return wasm.__wbg_set_soldiers_exoskeleton(this.ptr, arg0);\n    }\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeSoldiers(ptr);\n    }\n}\n\nfunction freeProductParams(ptr) {\n\n    wasm.__wbg_productparams_free(ptr);\n}\n/**\n*/\nexport class ProductParams {\n    /**\n    * @returns {number}\n    */\n    get production_capacity() {\n        return wasm.__wbg_get_productparams_production_capacity(this.ptr);\n    }\n    set production_capacity(arg0) {\n        return wasm.__wbg_set_productparams_production_capacity(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get qty() {\n        return wasm.__wbg_get_productparams_qty(this.ptr);\n    }\n    set qty(arg0) {\n        return wasm.__wbg_set_productparams_qty(this.ptr, arg0);\n    }\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeProductParams(ptr);\n    }\n}\n\nfunction freeGalaxy(ptr) {\n\n    wasm.__wbg_galaxy_free(ptr);\n}\n/**\n*/\nexport class Galaxy {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Galaxy.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeGalaxy(ptr);\n    }\n    /**\n    * @returns {Galaxy}\n    */\n    static new() {\n        return Galaxy.__wrap(wasm.galaxy_new());\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @returns {void}\n    */\n    interop_colonize(arg0, arg1, arg2) {\n        return wasm.galaxy_interop_colonize(this.ptr, arg0, arg1, arg2);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    justify_war(arg0, arg1) {\n        return wasm.galaxy_justify_war(this.ptr, arg0, arg1);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {boolean}\n    */\n    has_war_goal(arg0, arg1) {\n        return (wasm.galaxy_has_war_goal(this.ptr, arg0, arg1)) !== 0;\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {Uint16Array} arg2\n    * @param {Uint16Array} arg3\n    * @returns {void}\n    */\n    declare_war(arg0, arg1, arg2, arg3) {\n        const [ptr2, len2] = passArray16ToWasm(arg2);\n        const [ptr3, len3] = passArray16ToWasm(arg3);\n        return wasm.galaxy_declare_war(this.ptr, arg0, arg1, ptr2, len2, ptr3, len3);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {boolean}\n    */\n    is_at_war_with(arg0, arg1) {\n        return (wasm.galaxy_is_at_war_with(this.ptr, arg0, arg1)) !== 0;\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @returns {void}\n    */\n    change_access_right(arg0, arg1, arg2) {\n        return wasm.galaxy_change_access_right(this.ptr, arg0, arg1, arg2);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    static access_threshold(arg0) {\n        return wasm.galaxy_access_threshold(arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {any}\n    */\n    interop_search(arg0, arg1) {\n        return takeObject(wasm.galaxy_interop_search(this.ptr, arg0, arg1));\n    }\n    /**\n    * @param {string} arg0\n    * @returns {any}\n    */\n    interop_search_name(arg0) {\n        const [ptr0, len0] = passStringToWasm(arg0);\n        return takeObject(wasm.galaxy_interop_search_name(this.ptr, ptr0, len0));\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @param {number} arg3\n    * @param {number} arg4\n    * @returns {any}\n    */\n    interop_cal_draw_data(arg0, arg1, arg2, arg3, arg4) {\n        return takeObject(wasm.galaxy_interop_cal_draw_data(this.ptr, arg0, arg1, arg2, arg3, arg4));\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {number}\n    */\n    get_city_idx(arg0, arg1) {\n        return wasm.galaxy_get_city_idx(this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {number}\n    */\n    static get_city_radius_limit() {\n        return wasm.galaxy_get_city_radius_limit();\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {CityGraph}\n    */\n    cal_city_graph(arg0, arg1) {\n        return CityGraph.__wrap(wasm.galaxy_cal_city_graph(this.ptr, arg0, arg1));\n    }\n    /**\n    * @param {number} arg0\n    * @returns {Int32Array}\n    */\n    get_colonized_map(arg0) {\n        const retptr = globalArgumentPtr();\n        wasm.galaxy_get_colonized_map(retptr, this.ptr, arg0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayI32FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 4);\n        return realRet;\n\n    }\n    /**\n    * @param {any} arg0\n    * @returns {void}\n    */\n    mock_cal_civilian_demands(arg0) {\n        return wasm.galaxy_mock_cal_civilian_demands(this.ptr, addHeapObject(arg0));\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    get_nation_relation(arg0) {\n        return wasm.galaxy_get_nation_relation(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {any}\n    */\n    interop_search_neighbour_nations(arg0, arg1) {\n        return takeObject(wasm.galaxy_interop_search_neighbour_nations(this.ptr, arg0, arg1));\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {boolean}\n    */\n    has_division(arg0, arg1) {\n        return (wasm.galaxy_has_division(this.ptr, arg0, arg1)) !== 0;\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    cal_planet_dim(arg0) {\n        return wasm.galaxy_cal_planet_dim(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    get_planet_width(arg0) {\n        return wasm.galaxy_get_planet_width(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    get_planet_height(arg0) {\n        return wasm.galaxy_get_planet_height(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {number}\n    */\n    get_planet_points(arg0) {\n        return wasm.galaxy_get_planet_points(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {boolean} arg2\n    * @param {number} arg3\n    * @param {number} arg4\n    * @returns {Uint8Array}\n    */\n    get_planet_path(arg0, arg1, arg2, arg3, arg4) {\n        const retptr = globalArgumentPtr();\n        wasm.galaxy_get_planet_path(retptr, this.ptr, arg0, arg1, arg2 ? 1 : 0, arg3, arg4);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {number} arg0\n    * @returns {Uint8Array}\n    */\n    get_planet_edges(arg0) {\n        const retptr = globalArgumentPtr();\n        wasm.galaxy_get_planet_edges(retptr, this.ptr, arg0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {number} arg0\n    * @returns {string}\n    */\n    get_planet_name(arg0) {\n        const retptr = globalArgumentPtr();\n        wasm.galaxy_get_planet_name(retptr, this.ptr, arg0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @returns {string}\n    */\n    cal_planet_click(arg0, arg1, arg2) {\n        const retptr = globalArgumentPtr();\n        wasm.galaxy_cal_planet_click(retptr, this.ptr, arg0, arg1, arg2);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {Galaxy}\n    */\n    cal_next_state() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return Galaxy.__wrap(wasm.galaxy_cal_next_state(ptr));\n    }\n    /**\n    * @param {any} arg0\n    * @param {number} arg1\n    * @param {boolean} arg2\n    * @returns {void}\n    */\n    add_division_template(arg0, arg1, arg2) {\n        return wasm.galaxy_add_division_template(this.ptr, addHeapObject(arg0), arg1, arg2 ? 1 : 0);\n    }\n    /**\n    * @param {number} arg0\n    * @returns {any}\n    */\n    get_division_template(arg0) {\n        return takeObject(wasm.galaxy_get_division_template(this.ptr, arg0));\n    }\n    /**\n    * @param {number} arg0\n    * @returns {void}\n    */\n    train_division(arg0) {\n        return wasm.galaxy_train_division(this.ptr, arg0);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    interop_move_division(arg0, arg1) {\n        return wasm.galaxy_interop_move_division(this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {any}\n    */\n    get_divisions_in_training() {\n        return takeObject(wasm.galaxy_get_divisions_in_training(this.ptr));\n    }\n    /**\n    * @returns {any}\n    */\n    get_divisions_undeployed() {\n        return takeObject(wasm.galaxy_get_divisions_undeployed(this.ptr));\n    }\n    /**\n    * @returns {any}\n    */\n    get_all_division_location() {\n        return takeObject(wasm.galaxy_get_all_division_location(this.ptr));\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    interop_deploy_division(arg0, arg1) {\n        return wasm.galaxy_interop_deploy_division(this.ptr, arg0, arg1);\n    }\n}\n\nfunction freeCityGraph(ptr) {\n\n    wasm.__wbg_citygraph_free(ptr);\n}\n/**\n*/\nexport class CityGraph {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CityGraph.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    /**\n    * @returns {number}\n    */\n    get num_structures() {\n        return wasm.__wbg_get_citygraph_num_structures(this.ptr);\n    }\n    set num_structures(arg0) {\n        return wasm.__wbg_set_citygraph_num_structures(this.ptr, arg0);\n    }\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeCityGraph(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_points() {\n        return wasm.citygraph_get_points(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_dims() {\n        return wasm.citygraph_get_dims(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_roads() {\n        return wasm.citygraph_get_roads(this.ptr);\n    }\n}\n\nexport function __wbindgen_object_drop_ref(i) {\n    dropRef(i);\n}\n\nexport function __wbindgen_json_parse(ptr, len) {\n    return addHeapObject(JSON.parse(getStringFromWasm(ptr, len)));\n}\n\nexport function __wbindgen_json_serialize(idx, ptrptr) {\n    const [ptr, len] = passStringToWasm(JSON.stringify(getObject(idx)));\n    getUint32Memory()[ptrptr / 4] = ptr;\n    return len;\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}